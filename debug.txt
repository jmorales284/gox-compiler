Grammar:

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> print_stmt
Rule 5     statement -> RETURN expression ;
Rule 6     statement -> CONTINUE ;
Rule 7     statement -> BREAK ;
Rule 8     statement -> while_stmt
Rule 9     statement -> if_stmt
Rule 10    statement -> funcdecl
Rule 11    statement -> assignment
Rule 12    statement -> vardecl
Rule 13    vardecl -> CONST ID type opt_init ;
Rule 14    vardecl -> VAR ID opt_type opt_init ;
Rule 15    opt_init -> <empty>
Rule 16    opt_init -> = expression  [precedence=right, level=1]
Rule 17    opt_type -> <empty>
Rule 18    opt_type -> type
Rule 19    assignment -> location = expression ;
Rule 20    funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list }
Rule 21    funcdecl -> IMPORT FUNC ID ( parameters_opt ) type_opt ;
Rule 22    parameters_opt -> <empty>
Rule 23    parameters_opt -> parameters
Rule 24    type_opt -> <empty>
Rule 25    type_opt -> type
Rule 26    parameters -> parameters , param
Rule 27    parameters -> param
Rule 28    param -> ID type
Rule 29    type -> BOOL_TYPE
Rule 30    type -> CHAR_TYPE
Rule 31    type -> FLOAT_TYPE
Rule 32    type -> INT_TYPE
Rule 33    block -> { statement_list }
Rule 34    if_stmt -> IF expression block ELSE block
Rule 35    if_stmt -> IF expression block
Rule 36    while_stmt -> WHILE expression block
Rule 37    print_stmt -> PRINT expression ;
Rule 38    location -> BACKTICK primary  [precedence=right, level=8]
Rule 39    location -> ID
Rule 40    expression -> BOOL
Rule 41    expression -> CHAR
Rule 42    expression -> FLOAT
Rule 43    expression -> INTEGER
Rule 44    expression -> primary
Rule 45    expression -> function_call
Rule 46    expression -> - expression  [precedence=right, level=8]
Rule 47    expression -> expression % expression  [precedence=left, level=7]
Rule 48    expression -> expression / expression  [precedence=left, level=7]
Rule 49    expression -> expression * expression  [precedence=left, level=7]
Rule 50    expression -> expression - expression  [precedence=left, level=6]
Rule 51    expression -> expression + expression  [precedence=left, level=6]
Rule 52    expression -> expression GE expression  [precedence=nonassoc, level=5]
Rule 53    expression -> expression LE expression  [precedence=nonassoc, level=5]
Rule 54    expression -> expression GT expression  [precedence=nonassoc, level=5]
Rule 55    expression -> expression LT expression  [precedence=nonassoc, level=5]
Rule 56    expression -> expression NE expression  [precedence=nonassoc, level=4]
Rule 57    expression -> expression EQ expression  [precedence=nonassoc, level=4]
Rule 58    expression -> expression LAND expression  [precedence=left, level=3]
Rule 59    expression -> expression LOR expression  [precedence=left, level=2]
Rule 60    primary -> location
Rule 61    primary -> ( expression )  [precedence=nonassoc, level=9]
Rule 62    function_call -> ID ( arguments_opt )  [precedence=left, level=10]
Rule 63    arguments_opt -> <empty>
Rule 64    arguments_opt -> arguments
Rule 65    arguments -> arguments , expression
Rule 66    arguments -> expression

Terminals, with rules where they appear:

%                    : 47
(                    : 20 21 61 62
)                    : 20 21 61 62
*                    : 49
+                    : 51
,                    : 26 65
-                    : 46 50
/                    : 48
;                    : 5 6 7 13 14 19 21 37
=                    : 16 19
BACKTICK             : 38
BOOL                 : 40
BOOL_TYPE            : 29
BREAK                : 7
CHAR                 : 41
CHAR_TYPE            : 30
CONST                : 13
CONTINUE             : 6
ELSE                 : 34
EQ                   : 57
FLOAT                : 42
FLOAT_TYPE           : 31
FUNC                 : 20 21
GE                   : 52
GT                   : 54
ID                   : 13 14 20 21 28 39 62
IF                   : 34 35
IMPORT               : 21
INTEGER              : 43
INT_TYPE             : 32
LAND                 : 58
LE                   : 53
LOR                  : 59
LT                   : 55
NE                   : 56
PRINT                : 37
RETURN               : 5
VAR                  : 14
WHILE                : 36
error                : 
{                    : 20 33
}                    : 20 33

Nonterminals, with rules where they appear:

arguments            : 64 65
arguments_opt        : 62
assignment           : 11
block                : 34 34 35 36
expression           : 5 16 19 34 35 36 37 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 61 65 66
funcdecl             : 10
function_call        : 45
if_stmt              : 9
location             : 19 60
opt_init             : 13 14
opt_type             : 14
param                : 26 27
parameters           : 23 26
parameters_opt       : 20 21
primary              : 38 44
print_stmt           : 4
program              : 0
statement            : 2 3
statement_list       : 1 3 20 33
type                 : 13 18 25 28
type_opt             : 20 21
vardecl              : 12
while_stmt           : 8


state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_stmt
    (5) statement -> . RETURN expression ;
    (6) statement -> . CONTINUE ;
    (7) statement -> . BREAK ;
    (8) statement -> . while_stmt
    (9) statement -> . if_stmt
    (10) statement -> . funcdecl
    (11) statement -> . assignment
    (12) statement -> . vardecl
    (37) print_stmt -> . PRINT expression ;
    (36) while_stmt -> . WHILE expression block
    (34) if_stmt -> . IF expression block ELSE block
    (35) if_stmt -> . IF expression block
    (20) funcdecl -> . FUNC ID ( parameters_opt ) type_opt { statement_list }
    (21) funcdecl -> . IMPORT FUNC ID ( parameters_opt ) type_opt ;
    (19) assignment -> . location = expression ;
    (13) vardecl -> . CONST ID type opt_init ;
    (14) vardecl -> . VAR ID opt_type opt_init ;
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    FUNC            shift and go to state 16
    IMPORT          shift and go to state 18
    CONST           shift and go to state 20
    VAR             shift and go to state 21
    BACKTICK        shift and go to state 22
    ID              shift and go to state 17

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    print_stmt                     shift and go to state 4
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    location                       shift and go to state 19

state 1

    (0) S' -> program .


state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_stmt
    (5) statement -> . RETURN expression ;
    (6) statement -> . CONTINUE ;
    (7) statement -> . BREAK ;
    (8) statement -> . while_stmt
    (9) statement -> . if_stmt
    (10) statement -> . funcdecl
    (11) statement -> . assignment
    (12) statement -> . vardecl
    (37) print_stmt -> . PRINT expression ;
    (36) while_stmt -> . WHILE expression block
    (34) if_stmt -> . IF expression block ELSE block
    (35) if_stmt -> . IF expression block
    (20) funcdecl -> . FUNC ID ( parameters_opt ) type_opt { statement_list }
    (21) funcdecl -> . IMPORT FUNC ID ( parameters_opt ) type_opt ;
    (19) assignment -> . location = expression ;
    (13) vardecl -> . CONST ID type opt_init ;
    (14) vardecl -> . VAR ID opt_type opt_init ;
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    $end            reduce using rule 1 (program -> statement_list .)
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    FUNC            shift and go to state 16
    IMPORT          shift and go to state 18
    CONST           shift and go to state 20
    VAR             shift and go to state 21
    BACKTICK        shift and go to state 22
    ID              shift and go to state 17

    statement                      shift and go to state 23
    print_stmt                     shift and go to state 4
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    location                       shift and go to state 19

state 3

    (2) statement_list -> statement .
    RETURN          reduce using rule 2 (statement_list -> statement .)
    CONTINUE        reduce using rule 2 (statement_list -> statement .)
    BREAK           reduce using rule 2 (statement_list -> statement .)
    PRINT           reduce using rule 2 (statement_list -> statement .)
    WHILE           reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    FUNC            reduce using rule 2 (statement_list -> statement .)
    IMPORT          reduce using rule 2 (statement_list -> statement .)
    CONST           reduce using rule 2 (statement_list -> statement .)
    VAR             reduce using rule 2 (statement_list -> statement .)
    BACKTICK        reduce using rule 2 (statement_list -> statement .)
    ID              reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    }               reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> print_stmt .
    RETURN          reduce using rule 4 (statement -> print_stmt .)
    CONTINUE        reduce using rule 4 (statement -> print_stmt .)
    BREAK           reduce using rule 4 (statement -> print_stmt .)
    PRINT           reduce using rule 4 (statement -> print_stmt .)
    WHILE           reduce using rule 4 (statement -> print_stmt .)
    IF              reduce using rule 4 (statement -> print_stmt .)
    FUNC            reduce using rule 4 (statement -> print_stmt .)
    IMPORT          reduce using rule 4 (statement -> print_stmt .)
    CONST           reduce using rule 4 (statement -> print_stmt .)
    VAR             reduce using rule 4 (statement -> print_stmt .)
    BACKTICK        reduce using rule 4 (statement -> print_stmt .)
    ID              reduce using rule 4 (statement -> print_stmt .)
    $end            reduce using rule 4 (statement -> print_stmt .)
    }               reduce using rule 4 (statement -> print_stmt .)


state 5

    (5) statement -> RETURN . expression ;
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 24
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 6

    (6) statement -> CONTINUE . ;
    ;               shift and go to state 35


state 7

    (7) statement -> BREAK . ;
    ;               shift and go to state 36


state 8

    (8) statement -> while_stmt .
    RETURN          reduce using rule 8 (statement -> while_stmt .)
    CONTINUE        reduce using rule 8 (statement -> while_stmt .)
    BREAK           reduce using rule 8 (statement -> while_stmt .)
    PRINT           reduce using rule 8 (statement -> while_stmt .)
    WHILE           reduce using rule 8 (statement -> while_stmt .)
    IF              reduce using rule 8 (statement -> while_stmt .)
    FUNC            reduce using rule 8 (statement -> while_stmt .)
    IMPORT          reduce using rule 8 (statement -> while_stmt .)
    CONST           reduce using rule 8 (statement -> while_stmt .)
    VAR             reduce using rule 8 (statement -> while_stmt .)
    BACKTICK        reduce using rule 8 (statement -> while_stmt .)
    ID              reduce using rule 8 (statement -> while_stmt .)
    $end            reduce using rule 8 (statement -> while_stmt .)
    }               reduce using rule 8 (statement -> while_stmt .)


state 9

    (9) statement -> if_stmt .
    RETURN          reduce using rule 9 (statement -> if_stmt .)
    CONTINUE        reduce using rule 9 (statement -> if_stmt .)
    BREAK           reduce using rule 9 (statement -> if_stmt .)
    PRINT           reduce using rule 9 (statement -> if_stmt .)
    WHILE           reduce using rule 9 (statement -> if_stmt .)
    IF              reduce using rule 9 (statement -> if_stmt .)
    FUNC            reduce using rule 9 (statement -> if_stmt .)
    IMPORT          reduce using rule 9 (statement -> if_stmt .)
    CONST           reduce using rule 9 (statement -> if_stmt .)
    VAR             reduce using rule 9 (statement -> if_stmt .)
    BACKTICK        reduce using rule 9 (statement -> if_stmt .)
    ID              reduce using rule 9 (statement -> if_stmt .)
    $end            reduce using rule 9 (statement -> if_stmt .)
    }               reduce using rule 9 (statement -> if_stmt .)


state 10

    (10) statement -> funcdecl .
    RETURN          reduce using rule 10 (statement -> funcdecl .)
    CONTINUE        reduce using rule 10 (statement -> funcdecl .)
    BREAK           reduce using rule 10 (statement -> funcdecl .)
    PRINT           reduce using rule 10 (statement -> funcdecl .)
    WHILE           reduce using rule 10 (statement -> funcdecl .)
    IF              reduce using rule 10 (statement -> funcdecl .)
    FUNC            reduce using rule 10 (statement -> funcdecl .)
    IMPORT          reduce using rule 10 (statement -> funcdecl .)
    CONST           reduce using rule 10 (statement -> funcdecl .)
    VAR             reduce using rule 10 (statement -> funcdecl .)
    BACKTICK        reduce using rule 10 (statement -> funcdecl .)
    ID              reduce using rule 10 (statement -> funcdecl .)
    $end            reduce using rule 10 (statement -> funcdecl .)
    }               reduce using rule 10 (statement -> funcdecl .)


state 11

    (11) statement -> assignment .
    RETURN          reduce using rule 11 (statement -> assignment .)
    CONTINUE        reduce using rule 11 (statement -> assignment .)
    BREAK           reduce using rule 11 (statement -> assignment .)
    PRINT           reduce using rule 11 (statement -> assignment .)
    WHILE           reduce using rule 11 (statement -> assignment .)
    IF              reduce using rule 11 (statement -> assignment .)
    FUNC            reduce using rule 11 (statement -> assignment .)
    IMPORT          reduce using rule 11 (statement -> assignment .)
    CONST           reduce using rule 11 (statement -> assignment .)
    VAR             reduce using rule 11 (statement -> assignment .)
    BACKTICK        reduce using rule 11 (statement -> assignment .)
    ID              reduce using rule 11 (statement -> assignment .)
    $end            reduce using rule 11 (statement -> assignment .)
    }               reduce using rule 11 (statement -> assignment .)


state 12

    (12) statement -> vardecl .
    RETURN          reduce using rule 12 (statement -> vardecl .)
    CONTINUE        reduce using rule 12 (statement -> vardecl .)
    BREAK           reduce using rule 12 (statement -> vardecl .)
    PRINT           reduce using rule 12 (statement -> vardecl .)
    WHILE           reduce using rule 12 (statement -> vardecl .)
    IF              reduce using rule 12 (statement -> vardecl .)
    FUNC            reduce using rule 12 (statement -> vardecl .)
    IMPORT          reduce using rule 12 (statement -> vardecl .)
    CONST           reduce using rule 12 (statement -> vardecl .)
    VAR             reduce using rule 12 (statement -> vardecl .)
    BACKTICK        reduce using rule 12 (statement -> vardecl .)
    ID              reduce using rule 12 (statement -> vardecl .)
    $end            reduce using rule 12 (statement -> vardecl .)
    }               reduce using rule 12 (statement -> vardecl .)


state 13

    (37) print_stmt -> PRINT . expression ;
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 37
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 14

    (36) while_stmt -> WHILE . expression block
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 38
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 15

    (34) if_stmt -> IF . expression block ELSE block
    (35) if_stmt -> IF . expression block
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 39
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 16

    (20) funcdecl -> FUNC . ID ( parameters_opt ) type_opt { statement_list }
    ID              shift and go to state 40


state 17

    (39) location -> ID .
    =               reduce using rule 39 (location -> ID .)
    ;               reduce using rule 39 (location -> ID .)
    %               reduce using rule 39 (location -> ID .)
    /               reduce using rule 39 (location -> ID .)
    *               reduce using rule 39 (location -> ID .)
    -               reduce using rule 39 (location -> ID .)
    +               reduce using rule 39 (location -> ID .)
    GE              reduce using rule 39 (location -> ID .)
    LE              reduce using rule 39 (location -> ID .)
    GT              reduce using rule 39 (location -> ID .)
    LT              reduce using rule 39 (location -> ID .)
    NE              reduce using rule 39 (location -> ID .)
    EQ              reduce using rule 39 (location -> ID .)
    LAND            reduce using rule 39 (location -> ID .)
    LOR             reduce using rule 39 (location -> ID .)
    {               reduce using rule 39 (location -> ID .)
    )               reduce using rule 39 (location -> ID .)
    ,               reduce using rule 39 (location -> ID .)


state 18

    (21) funcdecl -> IMPORT . FUNC ID ( parameters_opt ) type_opt ;
    FUNC            shift and go to state 41


state 19

    (19) assignment -> location . = expression ;
    =               shift and go to state 42


state 20

    (13) vardecl -> CONST . ID type opt_init ;
    ID              shift and go to state 43


state 21

    (14) vardecl -> VAR . ID opt_type opt_init ;
    ID              shift and go to state 44


state 22

    (38) location -> BACKTICK . primary
    (60) primary -> . location
    (61) primary -> . ( expression )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    (               shift and go to state 33
    BACKTICK        shift and go to state 22
    ID              shift and go to state 17

    primary                        shift and go to state 45
    location                       shift and go to state 32

state 23

    (3) statement_list -> statement_list statement .
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 3 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 3 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    FUNC            reduce using rule 3 (statement_list -> statement_list statement .)
    IMPORT          reduce using rule 3 (statement_list -> statement_list statement .)
    CONST           reduce using rule 3 (statement_list -> statement_list statement .)
    VAR             reduce using rule 3 (statement_list -> statement_list statement .)
    BACKTICK        reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    }               reduce using rule 3 (statement_list -> statement_list statement .)


state 24

    (5) statement -> RETURN expression . ;
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    ;               shift and go to state 46
    %               shift and go to state 47
    /               shift and go to state 48
    *               shift and go to state 49
    -               shift and go to state 50
    +               shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    NE              shift and go to state 56
    EQ              shift and go to state 57
    LAND            shift and go to state 58
    LOR             shift and go to state 59


state 25

    (40) expression -> BOOL .
    ;               reduce using rule 40 (expression -> BOOL .)
    %               reduce using rule 40 (expression -> BOOL .)
    /               reduce using rule 40 (expression -> BOOL .)
    *               reduce using rule 40 (expression -> BOOL .)
    -               reduce using rule 40 (expression -> BOOL .)
    +               reduce using rule 40 (expression -> BOOL .)
    GE              reduce using rule 40 (expression -> BOOL .)
    LE              reduce using rule 40 (expression -> BOOL .)
    GT              reduce using rule 40 (expression -> BOOL .)
    LT              reduce using rule 40 (expression -> BOOL .)
    NE              reduce using rule 40 (expression -> BOOL .)
    EQ              reduce using rule 40 (expression -> BOOL .)
    LAND            reduce using rule 40 (expression -> BOOL .)
    LOR             reduce using rule 40 (expression -> BOOL .)
    {               reduce using rule 40 (expression -> BOOL .)
    )               reduce using rule 40 (expression -> BOOL .)
    ,               reduce using rule 40 (expression -> BOOL .)


state 26

    (41) expression -> CHAR .
    ;               reduce using rule 41 (expression -> CHAR .)
    %               reduce using rule 41 (expression -> CHAR .)
    /               reduce using rule 41 (expression -> CHAR .)
    *               reduce using rule 41 (expression -> CHAR .)
    -               reduce using rule 41 (expression -> CHAR .)
    +               reduce using rule 41 (expression -> CHAR .)
    GE              reduce using rule 41 (expression -> CHAR .)
    LE              reduce using rule 41 (expression -> CHAR .)
    GT              reduce using rule 41 (expression -> CHAR .)
    LT              reduce using rule 41 (expression -> CHAR .)
    NE              reduce using rule 41 (expression -> CHAR .)
    EQ              reduce using rule 41 (expression -> CHAR .)
    LAND            reduce using rule 41 (expression -> CHAR .)
    LOR             reduce using rule 41 (expression -> CHAR .)
    {               reduce using rule 41 (expression -> CHAR .)
    )               reduce using rule 41 (expression -> CHAR .)
    ,               reduce using rule 41 (expression -> CHAR .)


state 27

    (42) expression -> FLOAT .
    ;               reduce using rule 42 (expression -> FLOAT .)
    %               reduce using rule 42 (expression -> FLOAT .)
    /               reduce using rule 42 (expression -> FLOAT .)
    *               reduce using rule 42 (expression -> FLOAT .)
    -               reduce using rule 42 (expression -> FLOAT .)
    +               reduce using rule 42 (expression -> FLOAT .)
    GE              reduce using rule 42 (expression -> FLOAT .)
    LE              reduce using rule 42 (expression -> FLOAT .)
    GT              reduce using rule 42 (expression -> FLOAT .)
    LT              reduce using rule 42 (expression -> FLOAT .)
    NE              reduce using rule 42 (expression -> FLOAT .)
    EQ              reduce using rule 42 (expression -> FLOAT .)
    LAND            reduce using rule 42 (expression -> FLOAT .)
    LOR             reduce using rule 42 (expression -> FLOAT .)
    {               reduce using rule 42 (expression -> FLOAT .)
    )               reduce using rule 42 (expression -> FLOAT .)
    ,               reduce using rule 42 (expression -> FLOAT .)


state 28

    (43) expression -> INTEGER .
    ;               reduce using rule 43 (expression -> INTEGER .)
    %               reduce using rule 43 (expression -> INTEGER .)
    /               reduce using rule 43 (expression -> INTEGER .)
    *               reduce using rule 43 (expression -> INTEGER .)
    -               reduce using rule 43 (expression -> INTEGER .)
    +               reduce using rule 43 (expression -> INTEGER .)
    GE              reduce using rule 43 (expression -> INTEGER .)
    LE              reduce using rule 43 (expression -> INTEGER .)
    GT              reduce using rule 43 (expression -> INTEGER .)
    LT              reduce using rule 43 (expression -> INTEGER .)
    NE              reduce using rule 43 (expression -> INTEGER .)
    EQ              reduce using rule 43 (expression -> INTEGER .)
    LAND            reduce using rule 43 (expression -> INTEGER .)
    LOR             reduce using rule 43 (expression -> INTEGER .)
    {               reduce using rule 43 (expression -> INTEGER .)
    )               reduce using rule 43 (expression -> INTEGER .)
    ,               reduce using rule 43 (expression -> INTEGER .)


state 29

    (44) expression -> primary .
    ;               reduce using rule 44 (expression -> primary .)
    %               reduce using rule 44 (expression -> primary .)
    /               reduce using rule 44 (expression -> primary .)
    *               reduce using rule 44 (expression -> primary .)
    -               reduce using rule 44 (expression -> primary .)
    +               reduce using rule 44 (expression -> primary .)
    GE              reduce using rule 44 (expression -> primary .)
    LE              reduce using rule 44 (expression -> primary .)
    GT              reduce using rule 44 (expression -> primary .)
    LT              reduce using rule 44 (expression -> primary .)
    NE              reduce using rule 44 (expression -> primary .)
    EQ              reduce using rule 44 (expression -> primary .)
    LAND            reduce using rule 44 (expression -> primary .)
    LOR             reduce using rule 44 (expression -> primary .)
    {               reduce using rule 44 (expression -> primary .)
    )               reduce using rule 44 (expression -> primary .)
    ,               reduce using rule 44 (expression -> primary .)


state 30

    (45) expression -> function_call .
    ;               reduce using rule 45 (expression -> function_call .)
    %               reduce using rule 45 (expression -> function_call .)
    /               reduce using rule 45 (expression -> function_call .)
    *               reduce using rule 45 (expression -> function_call .)
    -               reduce using rule 45 (expression -> function_call .)
    +               reduce using rule 45 (expression -> function_call .)
    GE              reduce using rule 45 (expression -> function_call .)
    LE              reduce using rule 45 (expression -> function_call .)
    GT              reduce using rule 45 (expression -> function_call .)
    LT              reduce using rule 45 (expression -> function_call .)
    NE              reduce using rule 45 (expression -> function_call .)
    EQ              reduce using rule 45 (expression -> function_call .)
    LAND            reduce using rule 45 (expression -> function_call .)
    LOR             reduce using rule 45 (expression -> function_call .)
    {               reduce using rule 45 (expression -> function_call .)
    )               reduce using rule 45 (expression -> function_call .)
    ,               reduce using rule 45 (expression -> function_call .)


state 31

    (46) expression -> - . expression
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 60
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 32

    (60) primary -> location .
    ;               reduce using rule 60 (primary -> location .)
    %               reduce using rule 60 (primary -> location .)
    /               reduce using rule 60 (primary -> location .)
    *               reduce using rule 60 (primary -> location .)
    -               reduce using rule 60 (primary -> location .)
    +               reduce using rule 60 (primary -> location .)
    GE              reduce using rule 60 (primary -> location .)
    LE              reduce using rule 60 (primary -> location .)
    GT              reduce using rule 60 (primary -> location .)
    LT              reduce using rule 60 (primary -> location .)
    NE              reduce using rule 60 (primary -> location .)
    EQ              reduce using rule 60 (primary -> location .)
    LAND            reduce using rule 60 (primary -> location .)
    LOR             reduce using rule 60 (primary -> location .)
    {               reduce using rule 60 (primary -> location .)
    =               reduce using rule 60 (primary -> location .)
    )               reduce using rule 60 (primary -> location .)
    ,               reduce using rule 60 (primary -> location .)


state 33

    (61) primary -> ( . expression )
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 61
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 34

    (62) function_call -> ID . ( arguments_opt )
    (39) location -> ID .
    (               shift and go to state 62
    ;               reduce using rule 39 (location -> ID .)
    %               reduce using rule 39 (location -> ID .)
    /               reduce using rule 39 (location -> ID .)
    *               reduce using rule 39 (location -> ID .)
    -               reduce using rule 39 (location -> ID .)
    +               reduce using rule 39 (location -> ID .)
    GE              reduce using rule 39 (location -> ID .)
    LE              reduce using rule 39 (location -> ID .)
    GT              reduce using rule 39 (location -> ID .)
    LT              reduce using rule 39 (location -> ID .)
    NE              reduce using rule 39 (location -> ID .)
    EQ              reduce using rule 39 (location -> ID .)
    LAND            reduce using rule 39 (location -> ID .)
    LOR             reduce using rule 39 (location -> ID .)
    {               reduce using rule 39 (location -> ID .)
    )               reduce using rule 39 (location -> ID .)
    ,               reduce using rule 39 (location -> ID .)


state 35

    (6) statement -> CONTINUE ; .
    RETURN          reduce using rule 6 (statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 6 (statement -> CONTINUE ; .)
    BREAK           reduce using rule 6 (statement -> CONTINUE ; .)
    PRINT           reduce using rule 6 (statement -> CONTINUE ; .)
    WHILE           reduce using rule 6 (statement -> CONTINUE ; .)
    IF              reduce using rule 6 (statement -> CONTINUE ; .)
    FUNC            reduce using rule 6 (statement -> CONTINUE ; .)
    IMPORT          reduce using rule 6 (statement -> CONTINUE ; .)
    CONST           reduce using rule 6 (statement -> CONTINUE ; .)
    VAR             reduce using rule 6 (statement -> CONTINUE ; .)
    BACKTICK        reduce using rule 6 (statement -> CONTINUE ; .)
    ID              reduce using rule 6 (statement -> CONTINUE ; .)
    $end            reduce using rule 6 (statement -> CONTINUE ; .)
    }               reduce using rule 6 (statement -> CONTINUE ; .)


state 36

    (7) statement -> BREAK ; .
    RETURN          reduce using rule 7 (statement -> BREAK ; .)
    CONTINUE        reduce using rule 7 (statement -> BREAK ; .)
    BREAK           reduce using rule 7 (statement -> BREAK ; .)
    PRINT           reduce using rule 7 (statement -> BREAK ; .)
    WHILE           reduce using rule 7 (statement -> BREAK ; .)
    IF              reduce using rule 7 (statement -> BREAK ; .)
    FUNC            reduce using rule 7 (statement -> BREAK ; .)
    IMPORT          reduce using rule 7 (statement -> BREAK ; .)
    CONST           reduce using rule 7 (statement -> BREAK ; .)
    VAR             reduce using rule 7 (statement -> BREAK ; .)
    BACKTICK        reduce using rule 7 (statement -> BREAK ; .)
    ID              reduce using rule 7 (statement -> BREAK ; .)
    $end            reduce using rule 7 (statement -> BREAK ; .)
    }               reduce using rule 7 (statement -> BREAK ; .)


state 37

    (37) print_stmt -> PRINT expression . ;
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    ;               shift and go to state 63
    %               shift and go to state 47
    /               shift and go to state 48
    *               shift and go to state 49
    -               shift and go to state 50
    +               shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    NE              shift and go to state 56
    EQ              shift and go to state 57
    LAND            shift and go to state 58
    LOR             shift and go to state 59


state 38

    (36) while_stmt -> WHILE expression . block
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    (33) block -> . { statement_list }
    %               shift and go to state 47
    /               shift and go to state 48
    *               shift and go to state 49
    -               shift and go to state 50
    +               shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    NE              shift and go to state 56
    EQ              shift and go to state 57
    LAND            shift and go to state 58
    LOR             shift and go to state 59
    {               shift and go to state 65

    block                          shift and go to state 64

state 39

    (34) if_stmt -> IF expression . block ELSE block
    (35) if_stmt -> IF expression . block
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    (33) block -> . { statement_list }
    %               shift and go to state 47
    /               shift and go to state 48
    *               shift and go to state 49
    -               shift and go to state 50
    +               shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    NE              shift and go to state 56
    EQ              shift and go to state 57
    LAND            shift and go to state 58
    LOR             shift and go to state 59
    {               shift and go to state 65

    block                          shift and go to state 66

state 40

    (20) funcdecl -> FUNC ID . ( parameters_opt ) type_opt { statement_list }
    (               shift and go to state 67


state 41

    (21) funcdecl -> IMPORT FUNC . ID ( parameters_opt ) type_opt ;
    ID              shift and go to state 68


state 42

    (19) assignment -> location = . expression ;
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    location                       shift and go to state 32
    expression                     shift and go to state 69
    primary                        shift and go to state 29
    function_call                  shift and go to state 30

state 43

    (13) vardecl -> CONST ID . type opt_init ;
    (29) type -> . BOOL_TYPE
    (30) type -> . CHAR_TYPE
    (31) type -> . FLOAT_TYPE
    (32) type -> . INT_TYPE
    BOOL_TYPE       shift and go to state 71
    CHAR_TYPE       shift and go to state 72
    FLOAT_TYPE      shift and go to state 73
    INT_TYPE        shift and go to state 74

    type                           shift and go to state 70

state 44

    (14) vardecl -> VAR ID . opt_type opt_init ;
    (17) opt_type -> .
    (18) opt_type -> . type
    (29) type -> . BOOL_TYPE
    (30) type -> . CHAR_TYPE
    (31) type -> . FLOAT_TYPE
    (32) type -> . INT_TYPE
    =               reduce using rule 17 (opt_type -> .)
    ;               reduce using rule 17 (opt_type -> .)
    BOOL_TYPE       shift and go to state 71
    CHAR_TYPE       shift and go to state 72
    FLOAT_TYPE      shift and go to state 73
    INT_TYPE        shift and go to state 74

    opt_type                       shift and go to state 75
    type                           shift and go to state 76

state 45

    (38) location -> BACKTICK primary .
    =               reduce using rule 38 (location -> BACKTICK primary .)
    ;               reduce using rule 38 (location -> BACKTICK primary .)
    %               reduce using rule 38 (location -> BACKTICK primary .)
    /               reduce using rule 38 (location -> BACKTICK primary .)
    *               reduce using rule 38 (location -> BACKTICK primary .)
    -               reduce using rule 38 (location -> BACKTICK primary .)
    +               reduce using rule 38 (location -> BACKTICK primary .)
    GE              reduce using rule 38 (location -> BACKTICK primary .)
    LE              reduce using rule 38 (location -> BACKTICK primary .)
    GT              reduce using rule 38 (location -> BACKTICK primary .)
    LT              reduce using rule 38 (location -> BACKTICK primary .)
    NE              reduce using rule 38 (location -> BACKTICK primary .)
    EQ              reduce using rule 38 (location -> BACKTICK primary .)
    LAND            reduce using rule 38 (location -> BACKTICK primary .)
    LOR             reduce using rule 38 (location -> BACKTICK primary .)
    {               reduce using rule 38 (location -> BACKTICK primary .)
    )               reduce using rule 38 (location -> BACKTICK primary .)
    ,               reduce using rule 38 (location -> BACKTICK primary .)


state 46

    (5) statement -> RETURN expression ; .
    RETURN          reduce using rule 5 (statement -> RETURN expression ; .)
    CONTINUE        reduce using rule 5 (statement -> RETURN expression ; .)
    BREAK           reduce using rule 5 (statement -> RETURN expression ; .)
    PRINT           reduce using rule 5 (statement -> RETURN expression ; .)
    WHILE           reduce using rule 5 (statement -> RETURN expression ; .)
    IF              reduce using rule 5 (statement -> RETURN expression ; .)
    FUNC            reduce using rule 5 (statement -> RETURN expression ; .)
    IMPORT          reduce using rule 5 (statement -> RETURN expression ; .)
    CONST           reduce using rule 5 (statement -> RETURN expression ; .)
    VAR             reduce using rule 5 (statement -> RETURN expression ; .)
    BACKTICK        reduce using rule 5 (statement -> RETURN expression ; .)
    ID              reduce using rule 5 (statement -> RETURN expression ; .)
    $end            reduce using rule 5 (statement -> RETURN expression ; .)
    }               reduce using rule 5 (statement -> RETURN expression ; .)


state 47

    (47) expression -> expression % . expression
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 77
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 48

    (48) expression -> expression / . expression
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 78
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 49

    (49) expression -> expression * . expression
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 79
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 50

    (50) expression -> expression - . expression
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 80
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 51

    (51) expression -> expression + . expression
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 81
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 52

    (52) expression -> expression GE . expression
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 82
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 53

    (53) expression -> expression LE . expression
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 83
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 54

    (54) expression -> expression GT . expression
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 84
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 55

    (55) expression -> expression LT . expression
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 85
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 56

    (56) expression -> expression NE . expression
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 86
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 57

    (57) expression -> expression EQ . expression
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 87
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 58

    (58) expression -> expression LAND . expression
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 88
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 59

    (59) expression -> expression LOR . expression
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 89
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 60

    (46) expression -> - expression .
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    ;               reduce using rule 46 (expression -> - expression .)
    %               reduce using rule 46 (expression -> - expression .)
    /               reduce using rule 46 (expression -> - expression .)
    *               reduce using rule 46 (expression -> - expression .)
    -               reduce using rule 46 (expression -> - expression .)
    +               reduce using rule 46 (expression -> - expression .)
    GE              reduce using rule 46 (expression -> - expression .)
    LE              reduce using rule 46 (expression -> - expression .)
    GT              reduce using rule 46 (expression -> - expression .)
    LT              reduce using rule 46 (expression -> - expression .)
    NE              reduce using rule 46 (expression -> - expression .)
    EQ              reduce using rule 46 (expression -> - expression .)
    LAND            reduce using rule 46 (expression -> - expression .)
    LOR             reduce using rule 46 (expression -> - expression .)
    {               reduce using rule 46 (expression -> - expression .)
    )               reduce using rule 46 (expression -> - expression .)
    ,               reduce using rule 46 (expression -> - expression .)


state 61

    (61) primary -> ( expression . )
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    )               shift and go to state 90
    %               shift and go to state 47
    /               shift and go to state 48
    *               shift and go to state 49
    -               shift and go to state 50
    +               shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    NE              shift and go to state 56
    EQ              shift and go to state 57
    LAND            shift and go to state 58
    LOR             shift and go to state 59


state 62

    (62) function_call -> ID ( . arguments_opt )
    (63) arguments_opt -> .
    (64) arguments_opt -> . arguments
    (65) arguments -> . arguments , expression
    (66) arguments -> . expression
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    )               reduce using rule 63 (arguments_opt -> .)
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    arguments_opt                  shift and go to state 91
    arguments                      shift and go to state 92
    expression                     shift and go to state 93
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 63

    (37) print_stmt -> PRINT expression ; .
    RETURN          reduce using rule 37 (print_stmt -> PRINT expression ; .)
    CONTINUE        reduce using rule 37 (print_stmt -> PRINT expression ; .)
    BREAK           reduce using rule 37 (print_stmt -> PRINT expression ; .)
    PRINT           reduce using rule 37 (print_stmt -> PRINT expression ; .)
    WHILE           reduce using rule 37 (print_stmt -> PRINT expression ; .)
    IF              reduce using rule 37 (print_stmt -> PRINT expression ; .)
    FUNC            reduce using rule 37 (print_stmt -> PRINT expression ; .)
    IMPORT          reduce using rule 37 (print_stmt -> PRINT expression ; .)
    CONST           reduce using rule 37 (print_stmt -> PRINT expression ; .)
    VAR             reduce using rule 37 (print_stmt -> PRINT expression ; .)
    BACKTICK        reduce using rule 37 (print_stmt -> PRINT expression ; .)
    ID              reduce using rule 37 (print_stmt -> PRINT expression ; .)
    $end            reduce using rule 37 (print_stmt -> PRINT expression ; .)
    }               reduce using rule 37 (print_stmt -> PRINT expression ; .)


state 64

    (36) while_stmt -> WHILE expression block .
    RETURN          reduce using rule 36 (while_stmt -> WHILE expression block .)
    CONTINUE        reduce using rule 36 (while_stmt -> WHILE expression block .)
    BREAK           reduce using rule 36 (while_stmt -> WHILE expression block .)
    PRINT           reduce using rule 36 (while_stmt -> WHILE expression block .)
    WHILE           reduce using rule 36 (while_stmt -> WHILE expression block .)
    IF              reduce using rule 36 (while_stmt -> WHILE expression block .)
    FUNC            reduce using rule 36 (while_stmt -> WHILE expression block .)
    IMPORT          reduce using rule 36 (while_stmt -> WHILE expression block .)
    CONST           reduce using rule 36 (while_stmt -> WHILE expression block .)
    VAR             reduce using rule 36 (while_stmt -> WHILE expression block .)
    BACKTICK        reduce using rule 36 (while_stmt -> WHILE expression block .)
    ID              reduce using rule 36 (while_stmt -> WHILE expression block .)
    $end            reduce using rule 36 (while_stmt -> WHILE expression block .)
    }               reduce using rule 36 (while_stmt -> WHILE expression block .)


state 65

    (33) block -> { . statement_list }
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_stmt
    (5) statement -> . RETURN expression ;
    (6) statement -> . CONTINUE ;
    (7) statement -> . BREAK ;
    (8) statement -> . while_stmt
    (9) statement -> . if_stmt
    (10) statement -> . funcdecl
    (11) statement -> . assignment
    (12) statement -> . vardecl
    (37) print_stmt -> . PRINT expression ;
    (36) while_stmt -> . WHILE expression block
    (34) if_stmt -> . IF expression block ELSE block
    (35) if_stmt -> . IF expression block
    (20) funcdecl -> . FUNC ID ( parameters_opt ) type_opt { statement_list }
    (21) funcdecl -> . IMPORT FUNC ID ( parameters_opt ) type_opt ;
    (19) assignment -> . location = expression ;
    (13) vardecl -> . CONST ID type opt_init ;
    (14) vardecl -> . VAR ID opt_type opt_init ;
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    FUNC            shift and go to state 16
    IMPORT          shift and go to state 18
    CONST           shift and go to state 20
    VAR             shift and go to state 21
    BACKTICK        shift and go to state 22
    ID              shift and go to state 17

    statement_list                 shift and go to state 94
    statement                      shift and go to state 3
    print_stmt                     shift and go to state 4
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    location                       shift and go to state 19

state 66

    (34) if_stmt -> IF expression block . ELSE block
    (35) if_stmt -> IF expression block .
    ELSE            shift and go to state 95
    RETURN          reduce using rule 35 (if_stmt -> IF expression block .)
    CONTINUE        reduce using rule 35 (if_stmt -> IF expression block .)
    BREAK           reduce using rule 35 (if_stmt -> IF expression block .)
    PRINT           reduce using rule 35 (if_stmt -> IF expression block .)
    WHILE           reduce using rule 35 (if_stmt -> IF expression block .)
    IF              reduce using rule 35 (if_stmt -> IF expression block .)
    FUNC            reduce using rule 35 (if_stmt -> IF expression block .)
    IMPORT          reduce using rule 35 (if_stmt -> IF expression block .)
    CONST           reduce using rule 35 (if_stmt -> IF expression block .)
    VAR             reduce using rule 35 (if_stmt -> IF expression block .)
    BACKTICK        reduce using rule 35 (if_stmt -> IF expression block .)
    ID              reduce using rule 35 (if_stmt -> IF expression block .)
    $end            reduce using rule 35 (if_stmt -> IF expression block .)
    }               reduce using rule 35 (if_stmt -> IF expression block .)


state 67

    (20) funcdecl -> FUNC ID ( . parameters_opt ) type_opt { statement_list }
    (22) parameters_opt -> .
    (23) parameters_opt -> . parameters
    (26) parameters -> . parameters , param
    (27) parameters -> . param
    (28) param -> . ID type
    )               reduce using rule 22 (parameters_opt -> .)
    ID              shift and go to state 96

    parameters_opt                 shift and go to state 97
    parameters                     shift and go to state 98
    param                          shift and go to state 99

state 68

    (21) funcdecl -> IMPORT FUNC ID . ( parameters_opt ) type_opt ;
    (               shift and go to state 100


state 69

    (19) assignment -> location = expression . ;
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    ;               shift and go to state 101
    %               shift and go to state 47
    /               shift and go to state 48
    *               shift and go to state 49
    -               shift and go to state 50
    +               shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    NE              shift and go to state 56
    EQ              shift and go to state 57
    LAND            shift and go to state 58
    LOR             shift and go to state 59


state 70

    (13) vardecl -> CONST ID type . opt_init ;
    (15) opt_init -> .
    (16) opt_init -> . = expression
    ;               reduce using rule 15 (opt_init -> .)
    =               shift and go to state 103

    opt_init                       shift and go to state 102

state 71

    (29) type -> BOOL_TYPE .
    =               reduce using rule 29 (type -> BOOL_TYPE .)
    ;               reduce using rule 29 (type -> BOOL_TYPE .)
    ,               reduce using rule 29 (type -> BOOL_TYPE .)
    )               reduce using rule 29 (type -> BOOL_TYPE .)
    {               reduce using rule 29 (type -> BOOL_TYPE .)


state 72

    (30) type -> CHAR_TYPE .
    =               reduce using rule 30 (type -> CHAR_TYPE .)
    ;               reduce using rule 30 (type -> CHAR_TYPE .)
    ,               reduce using rule 30 (type -> CHAR_TYPE .)
    )               reduce using rule 30 (type -> CHAR_TYPE .)
    {               reduce using rule 30 (type -> CHAR_TYPE .)


state 73

    (31) type -> FLOAT_TYPE .
    =               reduce using rule 31 (type -> FLOAT_TYPE .)
    ;               reduce using rule 31 (type -> FLOAT_TYPE .)
    ,               reduce using rule 31 (type -> FLOAT_TYPE .)
    )               reduce using rule 31 (type -> FLOAT_TYPE .)
    {               reduce using rule 31 (type -> FLOAT_TYPE .)


state 74

    (32) type -> INT_TYPE .
    =               reduce using rule 32 (type -> INT_TYPE .)
    ;               reduce using rule 32 (type -> INT_TYPE .)
    ,               reduce using rule 32 (type -> INT_TYPE .)
    )               reduce using rule 32 (type -> INT_TYPE .)
    {               reduce using rule 32 (type -> INT_TYPE .)


state 75

    (14) vardecl -> VAR ID opt_type . opt_init ;
    (15) opt_init -> .
    (16) opt_init -> . = expression
    ;               reduce using rule 15 (opt_init -> .)
    =               shift and go to state 103

    opt_init                       shift and go to state 104

state 76

    (18) opt_type -> type .
    =               reduce using rule 18 (opt_type -> type .)
    ;               reduce using rule 18 (opt_type -> type .)


state 77

    (47) expression -> expression % expression .
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    ;               reduce using rule 47 (expression -> expression % expression .)
    %               reduce using rule 47 (expression -> expression % expression .)
    /               reduce using rule 47 (expression -> expression % expression .)
    *               reduce using rule 47 (expression -> expression % expression .)
    -               reduce using rule 47 (expression -> expression % expression .)
    +               reduce using rule 47 (expression -> expression % expression .)
    GE              reduce using rule 47 (expression -> expression % expression .)
    LE              reduce using rule 47 (expression -> expression % expression .)
    GT              reduce using rule 47 (expression -> expression % expression .)
    LT              reduce using rule 47 (expression -> expression % expression .)
    NE              reduce using rule 47 (expression -> expression % expression .)
    EQ              reduce using rule 47 (expression -> expression % expression .)
    LAND            reduce using rule 47 (expression -> expression % expression .)
    LOR             reduce using rule 47 (expression -> expression % expression .)
    {               reduce using rule 47 (expression -> expression % expression .)
    )               reduce using rule 47 (expression -> expression % expression .)
    ,               reduce using rule 47 (expression -> expression % expression .)


state 78

    (48) expression -> expression / expression .
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    ;               reduce using rule 48 (expression -> expression / expression .)
    %               reduce using rule 48 (expression -> expression / expression .)
    /               reduce using rule 48 (expression -> expression / expression .)
    *               reduce using rule 48 (expression -> expression / expression .)
    -               reduce using rule 48 (expression -> expression / expression .)
    +               reduce using rule 48 (expression -> expression / expression .)
    GE              reduce using rule 48 (expression -> expression / expression .)
    LE              reduce using rule 48 (expression -> expression / expression .)
    GT              reduce using rule 48 (expression -> expression / expression .)
    LT              reduce using rule 48 (expression -> expression / expression .)
    NE              reduce using rule 48 (expression -> expression / expression .)
    EQ              reduce using rule 48 (expression -> expression / expression .)
    LAND            reduce using rule 48 (expression -> expression / expression .)
    LOR             reduce using rule 48 (expression -> expression / expression .)
    {               reduce using rule 48 (expression -> expression / expression .)
    )               reduce using rule 48 (expression -> expression / expression .)
    ,               reduce using rule 48 (expression -> expression / expression .)


state 79

    (49) expression -> expression * expression .
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    ;               reduce using rule 49 (expression -> expression * expression .)
    %               reduce using rule 49 (expression -> expression * expression .)
    /               reduce using rule 49 (expression -> expression * expression .)
    *               reduce using rule 49 (expression -> expression * expression .)
    -               reduce using rule 49 (expression -> expression * expression .)
    +               reduce using rule 49 (expression -> expression * expression .)
    GE              reduce using rule 49 (expression -> expression * expression .)
    LE              reduce using rule 49 (expression -> expression * expression .)
    GT              reduce using rule 49 (expression -> expression * expression .)
    LT              reduce using rule 49 (expression -> expression * expression .)
    NE              reduce using rule 49 (expression -> expression * expression .)
    EQ              reduce using rule 49 (expression -> expression * expression .)
    LAND            reduce using rule 49 (expression -> expression * expression .)
    LOR             reduce using rule 49 (expression -> expression * expression .)
    {               reduce using rule 49 (expression -> expression * expression .)
    )               reduce using rule 49 (expression -> expression * expression .)
    ,               reduce using rule 49 (expression -> expression * expression .)


state 80

    (50) expression -> expression - expression .
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    ;               reduce using rule 50 (expression -> expression - expression .)
    -               reduce using rule 50 (expression -> expression - expression .)
    +               reduce using rule 50 (expression -> expression - expression .)
    GE              reduce using rule 50 (expression -> expression - expression .)
    LE              reduce using rule 50 (expression -> expression - expression .)
    GT              reduce using rule 50 (expression -> expression - expression .)
    LT              reduce using rule 50 (expression -> expression - expression .)
    NE              reduce using rule 50 (expression -> expression - expression .)
    EQ              reduce using rule 50 (expression -> expression - expression .)
    LAND            reduce using rule 50 (expression -> expression - expression .)
    LOR             reduce using rule 50 (expression -> expression - expression .)
    {               reduce using rule 50 (expression -> expression - expression .)
    )               reduce using rule 50 (expression -> expression - expression .)
    ,               reduce using rule 50 (expression -> expression - expression .)
    %               shift and go to state 47
    /               shift and go to state 48
    *               shift and go to state 49


state 81

    (51) expression -> expression + expression .
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    ;               reduce using rule 51 (expression -> expression + expression .)
    -               reduce using rule 51 (expression -> expression + expression .)
    +               reduce using rule 51 (expression -> expression + expression .)
    GE              reduce using rule 51 (expression -> expression + expression .)
    LE              reduce using rule 51 (expression -> expression + expression .)
    GT              reduce using rule 51 (expression -> expression + expression .)
    LT              reduce using rule 51 (expression -> expression + expression .)
    NE              reduce using rule 51 (expression -> expression + expression .)
    EQ              reduce using rule 51 (expression -> expression + expression .)
    LAND            reduce using rule 51 (expression -> expression + expression .)
    LOR             reduce using rule 51 (expression -> expression + expression .)
    {               reduce using rule 51 (expression -> expression + expression .)
    )               reduce using rule 51 (expression -> expression + expression .)
    ,               reduce using rule 51 (expression -> expression + expression .)
    %               shift and go to state 47
    /               shift and go to state 48
    *               shift and go to state 49


state 82

    (52) expression -> expression GE expression .
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    ;               reduce using rule 52 (expression -> expression GE expression .)
    GE              reduce using rule 52 (expression -> expression GE expression .)
    LE              reduce using rule 52 (expression -> expression GE expression .)
    GT              reduce using rule 52 (expression -> expression GE expression .)
    LT              reduce using rule 52 (expression -> expression GE expression .)
    NE              reduce using rule 52 (expression -> expression GE expression .)
    EQ              reduce using rule 52 (expression -> expression GE expression .)
    LAND            reduce using rule 52 (expression -> expression GE expression .)
    LOR             reduce using rule 52 (expression -> expression GE expression .)
    {               reduce using rule 52 (expression -> expression GE expression .)
    )               reduce using rule 52 (expression -> expression GE expression .)
    ,               reduce using rule 52 (expression -> expression GE expression .)
    %               shift and go to state 47
    /               shift and go to state 48
    *               shift and go to state 49
    -               shift and go to state 50
    +               shift and go to state 51


state 83

    (53) expression -> expression LE expression .
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    ;               reduce using rule 53 (expression -> expression LE expression .)
    GE              reduce using rule 53 (expression -> expression LE expression .)
    LE              reduce using rule 53 (expression -> expression LE expression .)
    GT              reduce using rule 53 (expression -> expression LE expression .)
    LT              reduce using rule 53 (expression -> expression LE expression .)
    NE              reduce using rule 53 (expression -> expression LE expression .)
    EQ              reduce using rule 53 (expression -> expression LE expression .)
    LAND            reduce using rule 53 (expression -> expression LE expression .)
    LOR             reduce using rule 53 (expression -> expression LE expression .)
    {               reduce using rule 53 (expression -> expression LE expression .)
    )               reduce using rule 53 (expression -> expression LE expression .)
    ,               reduce using rule 53 (expression -> expression LE expression .)
    %               shift and go to state 47
    /               shift and go to state 48
    *               shift and go to state 49
    -               shift and go to state 50
    +               shift and go to state 51


state 84

    (54) expression -> expression GT expression .
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    ;               reduce using rule 54 (expression -> expression GT expression .)
    GE              reduce using rule 54 (expression -> expression GT expression .)
    LE              reduce using rule 54 (expression -> expression GT expression .)
    GT              reduce using rule 54 (expression -> expression GT expression .)
    LT              reduce using rule 54 (expression -> expression GT expression .)
    NE              reduce using rule 54 (expression -> expression GT expression .)
    EQ              reduce using rule 54 (expression -> expression GT expression .)
    LAND            reduce using rule 54 (expression -> expression GT expression .)
    LOR             reduce using rule 54 (expression -> expression GT expression .)
    {               reduce using rule 54 (expression -> expression GT expression .)
    )               reduce using rule 54 (expression -> expression GT expression .)
    ,               reduce using rule 54 (expression -> expression GT expression .)
    %               shift and go to state 47
    /               shift and go to state 48
    *               shift and go to state 49
    -               shift and go to state 50
    +               shift and go to state 51


state 85

    (55) expression -> expression LT expression .
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    ;               reduce using rule 55 (expression -> expression LT expression .)
    GE              reduce using rule 55 (expression -> expression LT expression .)
    LE              reduce using rule 55 (expression -> expression LT expression .)
    GT              reduce using rule 55 (expression -> expression LT expression .)
    LT              reduce using rule 55 (expression -> expression LT expression .)
    NE              reduce using rule 55 (expression -> expression LT expression .)
    EQ              reduce using rule 55 (expression -> expression LT expression .)
    LAND            reduce using rule 55 (expression -> expression LT expression .)
    LOR             reduce using rule 55 (expression -> expression LT expression .)
    {               reduce using rule 55 (expression -> expression LT expression .)
    )               reduce using rule 55 (expression -> expression LT expression .)
    ,               reduce using rule 55 (expression -> expression LT expression .)
    %               shift and go to state 47
    /               shift and go to state 48
    *               shift and go to state 49
    -               shift and go to state 50
    +               shift and go to state 51


state 86

    (56) expression -> expression NE expression .
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    ;               reduce using rule 56 (expression -> expression NE expression .)
    NE              reduce using rule 56 (expression -> expression NE expression .)
    EQ              reduce using rule 56 (expression -> expression NE expression .)
    LAND            reduce using rule 56 (expression -> expression NE expression .)
    LOR             reduce using rule 56 (expression -> expression NE expression .)
    {               reduce using rule 56 (expression -> expression NE expression .)
    )               reduce using rule 56 (expression -> expression NE expression .)
    ,               reduce using rule 56 (expression -> expression NE expression .)
    %               shift and go to state 47
    /               shift and go to state 48
    *               shift and go to state 49
    -               shift and go to state 50
    +               shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55


state 87

    (57) expression -> expression EQ expression .
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    ;               reduce using rule 57 (expression -> expression EQ expression .)
    NE              reduce using rule 57 (expression -> expression EQ expression .)
    EQ              reduce using rule 57 (expression -> expression EQ expression .)
    LAND            reduce using rule 57 (expression -> expression EQ expression .)
    LOR             reduce using rule 57 (expression -> expression EQ expression .)
    {               reduce using rule 57 (expression -> expression EQ expression .)
    )               reduce using rule 57 (expression -> expression EQ expression .)
    ,               reduce using rule 57 (expression -> expression EQ expression .)
    %               shift and go to state 47
    /               shift and go to state 48
    *               shift and go to state 49
    -               shift and go to state 50
    +               shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55


state 88

    (58) expression -> expression LAND expression .
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    ;               reduce using rule 58 (expression -> expression LAND expression .)
    LAND            reduce using rule 58 (expression -> expression LAND expression .)
    LOR             reduce using rule 58 (expression -> expression LAND expression .)
    {               reduce using rule 58 (expression -> expression LAND expression .)
    )               reduce using rule 58 (expression -> expression LAND expression .)
    ,               reduce using rule 58 (expression -> expression LAND expression .)
    %               shift and go to state 47
    /               shift and go to state 48
    *               shift and go to state 49
    -               shift and go to state 50
    +               shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    NE              shift and go to state 56
    EQ              shift and go to state 57


state 89

    (59) expression -> expression LOR expression .
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    ;               reduce using rule 59 (expression -> expression LOR expression .)
    LOR             reduce using rule 59 (expression -> expression LOR expression .)
    {               reduce using rule 59 (expression -> expression LOR expression .)
    )               reduce using rule 59 (expression -> expression LOR expression .)
    ,               reduce using rule 59 (expression -> expression LOR expression .)
    %               shift and go to state 47
    /               shift and go to state 48
    *               shift and go to state 49
    -               shift and go to state 50
    +               shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    NE              shift and go to state 56
    EQ              shift and go to state 57
    LAND            shift and go to state 58


state 90

    (61) primary -> ( expression ) .
    ;               reduce using rule 61 (primary -> ( expression ) .)
    %               reduce using rule 61 (primary -> ( expression ) .)
    /               reduce using rule 61 (primary -> ( expression ) .)
    *               reduce using rule 61 (primary -> ( expression ) .)
    -               reduce using rule 61 (primary -> ( expression ) .)
    +               reduce using rule 61 (primary -> ( expression ) .)
    GE              reduce using rule 61 (primary -> ( expression ) .)
    LE              reduce using rule 61 (primary -> ( expression ) .)
    GT              reduce using rule 61 (primary -> ( expression ) .)
    LT              reduce using rule 61 (primary -> ( expression ) .)
    NE              reduce using rule 61 (primary -> ( expression ) .)
    EQ              reduce using rule 61 (primary -> ( expression ) .)
    LAND            reduce using rule 61 (primary -> ( expression ) .)
    LOR             reduce using rule 61 (primary -> ( expression ) .)
    {               reduce using rule 61 (primary -> ( expression ) .)
    =               reduce using rule 61 (primary -> ( expression ) .)
    )               reduce using rule 61 (primary -> ( expression ) .)
    ,               reduce using rule 61 (primary -> ( expression ) .)


state 91

    (62) function_call -> ID ( arguments_opt . )
    )               shift and go to state 105


state 92

    (64) arguments_opt -> arguments .
    (65) arguments -> arguments . , expression
    )               reduce using rule 64 (arguments_opt -> arguments .)
    ,               shift and go to state 106


state 93

    (66) arguments -> expression .
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    ,               reduce using rule 66 (arguments -> expression .)
    )               reduce using rule 66 (arguments -> expression .)
    %               shift and go to state 47
    /               shift and go to state 48
    *               shift and go to state 49
    -               shift and go to state 50
    +               shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    NE              shift and go to state 56
    EQ              shift and go to state 57
    LAND            shift and go to state 58
    LOR             shift and go to state 59


state 94

    (33) block -> { statement_list . }
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_stmt
    (5) statement -> . RETURN expression ;
    (6) statement -> . CONTINUE ;
    (7) statement -> . BREAK ;
    (8) statement -> . while_stmt
    (9) statement -> . if_stmt
    (10) statement -> . funcdecl
    (11) statement -> . assignment
    (12) statement -> . vardecl
    (37) print_stmt -> . PRINT expression ;
    (36) while_stmt -> . WHILE expression block
    (34) if_stmt -> . IF expression block ELSE block
    (35) if_stmt -> . IF expression block
    (20) funcdecl -> . FUNC ID ( parameters_opt ) type_opt { statement_list }
    (21) funcdecl -> . IMPORT FUNC ID ( parameters_opt ) type_opt ;
    (19) assignment -> . location = expression ;
    (13) vardecl -> . CONST ID type opt_init ;
    (14) vardecl -> . VAR ID opt_type opt_init ;
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    }               shift and go to state 107
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    FUNC            shift and go to state 16
    IMPORT          shift and go to state 18
    CONST           shift and go to state 20
    VAR             shift and go to state 21
    BACKTICK        shift and go to state 22
    ID              shift and go to state 17

    statement                      shift and go to state 23
    print_stmt                     shift and go to state 4
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    location                       shift and go to state 19

state 95

    (34) if_stmt -> IF expression block ELSE . block
    (33) block -> . { statement_list }
    {               shift and go to state 65

    block                          shift and go to state 108

state 96

    (28) param -> ID . type
    (29) type -> . BOOL_TYPE
    (30) type -> . CHAR_TYPE
    (31) type -> . FLOAT_TYPE
    (32) type -> . INT_TYPE
    BOOL_TYPE       shift and go to state 71
    CHAR_TYPE       shift and go to state 72
    FLOAT_TYPE      shift and go to state 73
    INT_TYPE        shift and go to state 74

    type                           shift and go to state 109

state 97

    (20) funcdecl -> FUNC ID ( parameters_opt . ) type_opt { statement_list }
    )               shift and go to state 110


state 98

    (23) parameters_opt -> parameters .
    (26) parameters -> parameters . , param
    )               reduce using rule 23 (parameters_opt -> parameters .)
    ,               shift and go to state 111


state 99

    (27) parameters -> param .
    ,               reduce using rule 27 (parameters -> param .)
    )               reduce using rule 27 (parameters -> param .)


state 100

    (21) funcdecl -> IMPORT FUNC ID ( . parameters_opt ) type_opt ;
    (22) parameters_opt -> .
    (23) parameters_opt -> . parameters
    (26) parameters -> . parameters , param
    (27) parameters -> . param
    (28) param -> . ID type
    )               reduce using rule 22 (parameters_opt -> .)
    ID              shift and go to state 96

    parameters_opt                 shift and go to state 112
    parameters                     shift and go to state 98
    param                          shift and go to state 99

state 101

    (19) assignment -> location = expression ; .
    RETURN          reduce using rule 19 (assignment -> location = expression ; .)
    CONTINUE        reduce using rule 19 (assignment -> location = expression ; .)
    BREAK           reduce using rule 19 (assignment -> location = expression ; .)
    PRINT           reduce using rule 19 (assignment -> location = expression ; .)
    WHILE           reduce using rule 19 (assignment -> location = expression ; .)
    IF              reduce using rule 19 (assignment -> location = expression ; .)
    FUNC            reduce using rule 19 (assignment -> location = expression ; .)
    IMPORT          reduce using rule 19 (assignment -> location = expression ; .)
    CONST           reduce using rule 19 (assignment -> location = expression ; .)
    VAR             reduce using rule 19 (assignment -> location = expression ; .)
    BACKTICK        reduce using rule 19 (assignment -> location = expression ; .)
    ID              reduce using rule 19 (assignment -> location = expression ; .)
    $end            reduce using rule 19 (assignment -> location = expression ; .)
    }               reduce using rule 19 (assignment -> location = expression ; .)


state 102

    (13) vardecl -> CONST ID type opt_init . ;
    ;               shift and go to state 113


state 103

    (16) opt_init -> = . expression
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 114
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 104

    (14) vardecl -> VAR ID opt_type opt_init . ;
    ;               shift and go to state 115


state 105

    (62) function_call -> ID ( arguments_opt ) .
    ;               reduce using rule 62 (function_call -> ID ( arguments_opt ) .)
    %               reduce using rule 62 (function_call -> ID ( arguments_opt ) .)
    /               reduce using rule 62 (function_call -> ID ( arguments_opt ) .)
    *               reduce using rule 62 (function_call -> ID ( arguments_opt ) .)
    -               reduce using rule 62 (function_call -> ID ( arguments_opt ) .)
    +               reduce using rule 62 (function_call -> ID ( arguments_opt ) .)
    GE              reduce using rule 62 (function_call -> ID ( arguments_opt ) .)
    LE              reduce using rule 62 (function_call -> ID ( arguments_opt ) .)
    GT              reduce using rule 62 (function_call -> ID ( arguments_opt ) .)
    LT              reduce using rule 62 (function_call -> ID ( arguments_opt ) .)
    NE              reduce using rule 62 (function_call -> ID ( arguments_opt ) .)
    EQ              reduce using rule 62 (function_call -> ID ( arguments_opt ) .)
    LAND            reduce using rule 62 (function_call -> ID ( arguments_opt ) .)
    LOR             reduce using rule 62 (function_call -> ID ( arguments_opt ) .)
    {               reduce using rule 62 (function_call -> ID ( arguments_opt ) .)
    )               reduce using rule 62 (function_call -> ID ( arguments_opt ) .)
    ,               reduce using rule 62 (function_call -> ID ( arguments_opt ) .)


state 106

    (65) arguments -> arguments , . expression
    (40) expression -> . BOOL
    (41) expression -> . CHAR
    (42) expression -> . FLOAT
    (43) expression -> . INTEGER
    (44) expression -> . primary
    (45) expression -> . function_call
    (46) expression -> . - expression
    (47) expression -> . expression % expression
    (48) expression -> . expression / expression
    (49) expression -> . expression * expression
    (50) expression -> . expression - expression
    (51) expression -> . expression + expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LT expression
    (56) expression -> . expression NE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression LAND expression
    (59) expression -> . expression LOR expression
    (60) primary -> . location
    (61) primary -> . ( expression )
    (62) function_call -> . ID ( arguments_opt )
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 116
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 107

    (33) block -> { statement_list } .
    RETURN          reduce using rule 33 (block -> { statement_list } .)
    CONTINUE        reduce using rule 33 (block -> { statement_list } .)
    BREAK           reduce using rule 33 (block -> { statement_list } .)
    PRINT           reduce using rule 33 (block -> { statement_list } .)
    WHILE           reduce using rule 33 (block -> { statement_list } .)
    IF              reduce using rule 33 (block -> { statement_list } .)
    FUNC            reduce using rule 33 (block -> { statement_list } .)
    IMPORT          reduce using rule 33 (block -> { statement_list } .)
    CONST           reduce using rule 33 (block -> { statement_list } .)
    VAR             reduce using rule 33 (block -> { statement_list } .)
    BACKTICK        reduce using rule 33 (block -> { statement_list } .)
    ID              reduce using rule 33 (block -> { statement_list } .)
    $end            reduce using rule 33 (block -> { statement_list } .)
    }               reduce using rule 33 (block -> { statement_list } .)
    ELSE            reduce using rule 33 (block -> { statement_list } .)


state 108

    (34) if_stmt -> IF expression block ELSE block .
    RETURN          reduce using rule 34 (if_stmt -> IF expression block ELSE block .)
    CONTINUE        reduce using rule 34 (if_stmt -> IF expression block ELSE block .)
    BREAK           reduce using rule 34 (if_stmt -> IF expression block ELSE block .)
    PRINT           reduce using rule 34 (if_stmt -> IF expression block ELSE block .)
    WHILE           reduce using rule 34 (if_stmt -> IF expression block ELSE block .)
    IF              reduce using rule 34 (if_stmt -> IF expression block ELSE block .)
    FUNC            reduce using rule 34 (if_stmt -> IF expression block ELSE block .)
    IMPORT          reduce using rule 34 (if_stmt -> IF expression block ELSE block .)
    CONST           reduce using rule 34 (if_stmt -> IF expression block ELSE block .)
    VAR             reduce using rule 34 (if_stmt -> IF expression block ELSE block .)
    BACKTICK        reduce using rule 34 (if_stmt -> IF expression block ELSE block .)
    ID              reduce using rule 34 (if_stmt -> IF expression block ELSE block .)
    $end            reduce using rule 34 (if_stmt -> IF expression block ELSE block .)
    }               reduce using rule 34 (if_stmt -> IF expression block ELSE block .)


state 109

    (28) param -> ID type .
    ,               reduce using rule 28 (param -> ID type .)
    )               reduce using rule 28 (param -> ID type .)


state 110

    (20) funcdecl -> FUNC ID ( parameters_opt ) . type_opt { statement_list }
    (24) type_opt -> .
    (25) type_opt -> . type
    (29) type -> . BOOL_TYPE
    (30) type -> . CHAR_TYPE
    (31) type -> . FLOAT_TYPE
    (32) type -> . INT_TYPE
    {               reduce using rule 24 (type_opt -> .)
    BOOL_TYPE       shift and go to state 71
    CHAR_TYPE       shift and go to state 72
    FLOAT_TYPE      shift and go to state 73
    INT_TYPE        shift and go to state 74

    type_opt                       shift and go to state 117
    type                           shift and go to state 118

state 111

    (26) parameters -> parameters , . param
    (28) param -> . ID type
    ID              shift and go to state 96

    param                          shift and go to state 119

state 112

    (21) funcdecl -> IMPORT FUNC ID ( parameters_opt . ) type_opt ;
    )               shift and go to state 120


state 113

    (13) vardecl -> CONST ID type opt_init ; .
    RETURN          reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    CONTINUE        reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    BREAK           reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    PRINT           reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    WHILE           reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    IF              reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    FUNC            reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    IMPORT          reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    CONST           reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    VAR             reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    BACKTICK        reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    ID              reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    $end            reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    }               reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)


state 114

    (16) opt_init -> = expression .
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    ;               reduce using rule 16 (opt_init -> = expression .)
    %               shift and go to state 47
    /               shift and go to state 48
    *               shift and go to state 49
    -               shift and go to state 50
    +               shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    NE              shift and go to state 56
    EQ              shift and go to state 57
    LAND            shift and go to state 58
    LOR             shift and go to state 59


state 115

    (14) vardecl -> VAR ID opt_type opt_init ; .
    RETURN          reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    CONTINUE        reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    BREAK           reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    PRINT           reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    WHILE           reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    IF              reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    FUNC            reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    IMPORT          reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    CONST           reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    VAR             reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    BACKTICK        reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    ID              reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    $end            reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    }               reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)


state 116

    (65) arguments -> arguments , expression .
    (47) expression -> expression . % expression
    (48) expression -> expression . / expression
    (49) expression -> expression . * expression
    (50) expression -> expression . - expression
    (51) expression -> expression . + expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LT expression
    (56) expression -> expression . NE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . LAND expression
    (59) expression -> expression . LOR expression
    ,               reduce using rule 65 (arguments -> arguments , expression .)
    )               reduce using rule 65 (arguments -> arguments , expression .)
    %               shift and go to state 47
    /               shift and go to state 48
    *               shift and go to state 49
    -               shift and go to state 50
    +               shift and go to state 51
    GE              shift and go to state 52
    LE              shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    NE              shift and go to state 56
    EQ              shift and go to state 57
    LAND            shift and go to state 58
    LOR             shift and go to state 59


state 117

    (20) funcdecl -> FUNC ID ( parameters_opt ) type_opt . { statement_list }
    {               shift and go to state 121


state 118

    (25) type_opt -> type .
    {               reduce using rule 25 (type_opt -> type .)
    ;               reduce using rule 25 (type_opt -> type .)


state 119

    (26) parameters -> parameters , param .
    ,               reduce using rule 26 (parameters -> parameters , param .)
    )               reduce using rule 26 (parameters -> parameters , param .)


state 120

    (21) funcdecl -> IMPORT FUNC ID ( parameters_opt ) . type_opt ;
    (24) type_opt -> .
    (25) type_opt -> . type
    (29) type -> . BOOL_TYPE
    (30) type -> . CHAR_TYPE
    (31) type -> . FLOAT_TYPE
    (32) type -> . INT_TYPE
    ;               reduce using rule 24 (type_opt -> .)
    BOOL_TYPE       shift and go to state 71
    CHAR_TYPE       shift and go to state 72
    FLOAT_TYPE      shift and go to state 73
    INT_TYPE        shift and go to state 74

    type_opt                       shift and go to state 122
    type                           shift and go to state 118

state 121

    (20) funcdecl -> FUNC ID ( parameters_opt ) type_opt { . statement_list }
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_stmt
    (5) statement -> . RETURN expression ;
    (6) statement -> . CONTINUE ;
    (7) statement -> . BREAK ;
    (8) statement -> . while_stmt
    (9) statement -> . if_stmt
    (10) statement -> . funcdecl
    (11) statement -> . assignment
    (12) statement -> . vardecl
    (37) print_stmt -> . PRINT expression ;
    (36) while_stmt -> . WHILE expression block
    (34) if_stmt -> . IF expression block ELSE block
    (35) if_stmt -> . IF expression block
    (20) funcdecl -> . FUNC ID ( parameters_opt ) type_opt { statement_list }
    (21) funcdecl -> . IMPORT FUNC ID ( parameters_opt ) type_opt ;
    (19) assignment -> . location = expression ;
    (13) vardecl -> . CONST ID type opt_init ;
    (14) vardecl -> . VAR ID opt_type opt_init ;
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    FUNC            shift and go to state 16
    IMPORT          shift and go to state 18
    CONST           shift and go to state 20
    VAR             shift and go to state 21
    BACKTICK        shift and go to state 22
    ID              shift and go to state 17

    statement_list                 shift and go to state 123
    statement                      shift and go to state 3
    print_stmt                     shift and go to state 4
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    location                       shift and go to state 19

state 122

    (21) funcdecl -> IMPORT FUNC ID ( parameters_opt ) type_opt . ;
    ;               shift and go to state 124


state 123

    (20) funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list . }
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_stmt
    (5) statement -> . RETURN expression ;
    (6) statement -> . CONTINUE ;
    (7) statement -> . BREAK ;
    (8) statement -> . while_stmt
    (9) statement -> . if_stmt
    (10) statement -> . funcdecl
    (11) statement -> . assignment
    (12) statement -> . vardecl
    (37) print_stmt -> . PRINT expression ;
    (36) while_stmt -> . WHILE expression block
    (34) if_stmt -> . IF expression block ELSE block
    (35) if_stmt -> . IF expression block
    (20) funcdecl -> . FUNC ID ( parameters_opt ) type_opt { statement_list }
    (21) funcdecl -> . IMPORT FUNC ID ( parameters_opt ) type_opt ;
    (19) assignment -> . location = expression ;
    (13) vardecl -> . CONST ID type opt_init ;
    (14) vardecl -> . VAR ID opt_type opt_init ;
    (38) location -> . BACKTICK primary
    (39) location -> . ID
    }               shift and go to state 125
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    FUNC            shift and go to state 16
    IMPORT          shift and go to state 18
    CONST           shift and go to state 20
    VAR             shift and go to state 21
    BACKTICK        shift and go to state 22
    ID              shift and go to state 17

    statement                      shift and go to state 23
    print_stmt                     shift and go to state 4
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    location                       shift and go to state 19

state 124

    (21) funcdecl -> IMPORT FUNC ID ( parameters_opt ) type_opt ; .
    RETURN          reduce using rule 21 (funcdecl -> IMPORT FUNC ID ( parameters_opt ) type_opt ; .)
    CONTINUE        reduce using rule 21 (funcdecl -> IMPORT FUNC ID ( parameters_opt ) type_opt ; .)
    BREAK           reduce using rule 21 (funcdecl -> IMPORT FUNC ID ( parameters_opt ) type_opt ; .)
    PRINT           reduce using rule 21 (funcdecl -> IMPORT FUNC ID ( parameters_opt ) type_opt ; .)
    WHILE           reduce using rule 21 (funcdecl -> IMPORT FUNC ID ( parameters_opt ) type_opt ; .)
    IF              reduce using rule 21 (funcdecl -> IMPORT FUNC ID ( parameters_opt ) type_opt ; .)
    FUNC            reduce using rule 21 (funcdecl -> IMPORT FUNC ID ( parameters_opt ) type_opt ; .)
    IMPORT          reduce using rule 21 (funcdecl -> IMPORT FUNC ID ( parameters_opt ) type_opt ; .)
    CONST           reduce using rule 21 (funcdecl -> IMPORT FUNC ID ( parameters_opt ) type_opt ; .)
    VAR             reduce using rule 21 (funcdecl -> IMPORT FUNC ID ( parameters_opt ) type_opt ; .)
    BACKTICK        reduce using rule 21 (funcdecl -> IMPORT FUNC ID ( parameters_opt ) type_opt ; .)
    ID              reduce using rule 21 (funcdecl -> IMPORT FUNC ID ( parameters_opt ) type_opt ; .)
    $end            reduce using rule 21 (funcdecl -> IMPORT FUNC ID ( parameters_opt ) type_opt ; .)
    }               reduce using rule 21 (funcdecl -> IMPORT FUNC ID ( parameters_opt ) type_opt ; .)


state 125

    (20) funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .
    RETURN          reduce using rule 20 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    CONTINUE        reduce using rule 20 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    BREAK           reduce using rule 20 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    PRINT           reduce using rule 20 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    WHILE           reduce using rule 20 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    IF              reduce using rule 20 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    FUNC            reduce using rule 20 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    IMPORT          reduce using rule 20 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    CONST           reduce using rule 20 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    VAR             reduce using rule 20 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    BACKTICK        reduce using rule 20 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    ID              reduce using rule 20 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    $end            reduce using rule 20 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    }               reduce using rule 20 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
