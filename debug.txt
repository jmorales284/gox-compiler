Grammar:

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> PRINT ( expression ) ;
Rule 5     statement -> PRINT expression ;
Rule 6     statement -> RETURN expression ;
Rule 7     statement -> CONTINUE ;
Rule 8     statement -> BREAK ;
Rule 9     statement -> while_stmt
Rule 10    statement -> if_stmt
Rule 11    statement -> funcdecl
Rule 12    statement -> assignment
Rule 13    statement -> vardecl
Rule 14    vardecl -> CONST ID type opt_init ;
Rule 15    vardecl -> VAR ID opt_type opt_init ;
Rule 16    opt_init -> <empty>
Rule 17    opt_init -> = expression  [precedence=right, level=1]
Rule 18    opt_type -> <empty>
Rule 19    opt_type -> type
Rule 20    assignment -> location = expression ;
Rule 21    funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list }
Rule 22    funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list }
Rule 23    opt_import -> <empty>
Rule 24    opt_import -> IMPORT
Rule 25    parameters_opt -> <empty>
Rule 26    parameters_opt -> parameters
Rule 27    type_opt -> <empty>
Rule 28    type_opt -> type
Rule 29    parameters -> parameters , param
Rule 30    parameters -> param
Rule 31    param -> ID type
Rule 32    type -> BOOL_TYPE
Rule 33    type -> CHAR_TYPE
Rule 34    type -> FLOAT_TYPE
Rule 35    type -> INT_TYPE
Rule 36    if_stmt -> IF expression { statement_list }
Rule 37    if_stmt -> IF expression { statement_list } ELSE { statement_list }
Rule 38    while_stmt -> WHILE expression { statement_list }
Rule 39    location -> ` expression
Rule 40    location -> ID
Rule 41    expression -> BOOL
Rule 42    expression -> CHAR
Rule 43    expression -> FLOAT
Rule 44    expression -> INTEGER
Rule 45    expression -> location
Rule 46    expression -> ID ( arguments_opt )
Rule 47    expression -> type ( expression )
Rule 48    expression -> ( expression )
Rule 49    expression -> expression LOR expression  [precedence=left, level=2]
Rule 50    expression -> expression LAND expression  [precedence=left, level=3]
Rule 51    expression -> expression NE expression  [precedence=nonassoc, level=4]
Rule 52    expression -> expression EQ expression  [precedence=nonassoc, level=4]
Rule 53    expression -> expression GE expression  [precedence=nonassoc, level=5]
Rule 54    expression -> expression LE expression  [precedence=nonassoc, level=5]
Rule 55    expression -> expression GT expression  [precedence=nonassoc, level=5]
Rule 56    expression -> expression LT expression  [precedence=nonassoc, level=5]
Rule 57    expression -> - expression  [precedence=right, level=8]
Rule 58    expression -> expression % expression  [precedence=left, level=7]
Rule 59    expression -> expression / expression  [precedence=left, level=7]
Rule 60    expression -> expression * expression  [precedence=left, level=7]
Rule 61    expression -> expression - expression  [precedence=left, level=6]
Rule 62    expression -> expression + expression  [precedence=left, level=6]
Rule 63    arguments -> expression _1_222c22_expression_repeat
Rule 64    _1_222c22_expression_repeat -> _1_222c22_expression_items
Rule 65    _1_222c22_expression_repeat -> <empty>
Rule 66    _1_222c22_expression_items -> _1_222c22_expression_items _1_222c22_expression_item
Rule 67    _1_222c22_expression_items -> _1_222c22_expression_item
Rule 68    _1_222c22_expression_item -> , expression
Rule 69    arguments_opt -> <empty>
Rule 70    arguments_opt -> arguments

Terminals, with rules where they appear:

%                    : 58
(                    : 4 21 22 46 47 48
)                    : 4 21 22 46 47 48
*                    : 60
+                    : 62
,                    : 29 68
-                    : 57 61
/                    : 59
;                    : 4 5 6 7 8 14 15 20
=                    : 17 20
BOOL                 : 41
BOOL_TYPE            : 32
BREAK                : 8
CHAR                 : 42
CHAR_TYPE            : 33
CONST                : 14
CONTINUE             : 7
ELSE                 : 37
EQ                   : 52
FLOAT                : 43
FLOAT_TYPE           : 34
FUNC                 : 21 22
GE                   : 53
GT                   : 55
ID                   : 14 15 21 22 31 40 46
IF                   : 36 37
IMPORT               : 24
INTEGER              : 44
INT_TYPE             : 35
LAND                 : 50
LE                   : 54
LOR                  : 49
LT                   : 56
NE                   : 51
PRINT                : 4 5
RETURN               : 6
VAR                  : 15
WHILE                : 38
`                    : 39
error                : 
{                    : 21 22 36 37 37 38
}                    : 21 22 36 37 37 38

Nonterminals, with rules where they appear:

_1_222c22_expression_item : 66 67
_1_222c22_expression_items : 64 66
_1_222c22_expression_repeat : 63
arguments            : 70
arguments_opt        : 46
assignment           : 12
expression           : 4 5 6 17 20 36 37 38 39 47 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 58 58 59 59 60 60 61 61 62 62 63 68
funcdecl             : 11
if_stmt              : 10
location             : 20 45
opt_import           : 21
opt_init             : 14 15
opt_type             : 15
param                : 29 30
parameters           : 26 29
parameters_opt       : 21 22
program              : 0
statement            : 2 3
statement_list       : 1 3 21 22 36 37 37 38
type                 : 14 19 28 31 47
type_opt             : 21 22
vardecl              : 13
while_stmt           : 9


state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . PRINT ( expression ) ;
    (5) statement -> . PRINT expression ;
    (6) statement -> . RETURN expression ;
    (7) statement -> . CONTINUE ;
    (8) statement -> . BREAK ;
    (9) statement -> . while_stmt
    (10) statement -> . if_stmt
    (11) statement -> . funcdecl
    (12) statement -> . assignment
    (13) statement -> . vardecl
    (38) while_stmt -> . WHILE expression { statement_list }
    (36) if_stmt -> . IF expression { statement_list }
    (37) if_stmt -> . IF expression { statement_list } ELSE { statement_list }
    (21) funcdecl -> . opt_import FUNC ID ( parameters_opt ) type_opt { statement_list }
    (22) funcdecl -> . FUNC ID ( parameters_opt ) type_opt { statement_list }
    (20) assignment -> . location = expression ;
    (14) vardecl -> . CONST ID type opt_init ;
    (15) vardecl -> . VAR ID opt_type opt_init ;
    (23) opt_import -> .
    (24) opt_import -> . IMPORT
    (39) location -> . ` expression
    (40) location -> . ID
  ! shift/reduce conflict for FUNC resolved as shift
    PRINT           shift and go to state 4
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    WHILE           shift and go to state 13
    IF              shift and go to state 14
    FUNC            shift and go to state 16
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    IMPORT          shift and go to state 21
    `               shift and go to state 22
    ID              shift and go to state 17

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    opt_import                     shift and go to state 15
    location                       shift and go to state 18

state 1

    (0) S' -> program .


state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . PRINT ( expression ) ;
    (5) statement -> . PRINT expression ;
    (6) statement -> . RETURN expression ;
    (7) statement -> . CONTINUE ;
    (8) statement -> . BREAK ;
    (9) statement -> . while_stmt
    (10) statement -> . if_stmt
    (11) statement -> . funcdecl
    (12) statement -> . assignment
    (13) statement -> . vardecl
    (38) while_stmt -> . WHILE expression { statement_list }
    (36) if_stmt -> . IF expression { statement_list }
    (37) if_stmt -> . IF expression { statement_list } ELSE { statement_list }
    (21) funcdecl -> . opt_import FUNC ID ( parameters_opt ) type_opt { statement_list }
    (22) funcdecl -> . FUNC ID ( parameters_opt ) type_opt { statement_list }
    (20) assignment -> . location = expression ;
    (14) vardecl -> . CONST ID type opt_init ;
    (15) vardecl -> . VAR ID opt_type opt_init ;
    (23) opt_import -> .
    (24) opt_import -> . IMPORT
    (39) location -> . ` expression
    (40) location -> . ID
  ! shift/reduce conflict for FUNC resolved as shift
    $end            reduce using rule 1 (program -> statement_list .)
    PRINT           shift and go to state 4
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    WHILE           shift and go to state 13
    IF              shift and go to state 14
    FUNC            shift and go to state 16
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    IMPORT          shift and go to state 21
    `               shift and go to state 22
    ID              shift and go to state 17

    statement                      shift and go to state 23
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    opt_import                     shift and go to state 15
    location                       shift and go to state 18

state 3

    (2) statement_list -> statement .
    PRINT           reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    CONTINUE        reduce using rule 2 (statement_list -> statement .)
    BREAK           reduce using rule 2 (statement_list -> statement .)
    WHILE           reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    FUNC            reduce using rule 2 (statement_list -> statement .)
    CONST           reduce using rule 2 (statement_list -> statement .)
    VAR             reduce using rule 2 (statement_list -> statement .)
    IMPORT          reduce using rule 2 (statement_list -> statement .)
    `               reduce using rule 2 (statement_list -> statement .)
    ID              reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    }               reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> PRINT . ( expression ) ;
    (5) statement -> PRINT . expression ;
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    (               shift and go to state 24
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 25
    location                       shift and go to state 30
    type                           shift and go to state 32

state 5

    (6) statement -> RETURN . expression ;
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 38
    location                       shift and go to state 30
    type                           shift and go to state 32

state 6

    (7) statement -> CONTINUE . ;
    ;               shift and go to state 40


state 7

    (8) statement -> BREAK . ;
    ;               shift and go to state 41


state 8

    (9) statement -> while_stmt .
    PRINT           reduce using rule 9 (statement -> while_stmt .)
    RETURN          reduce using rule 9 (statement -> while_stmt .)
    CONTINUE        reduce using rule 9 (statement -> while_stmt .)
    BREAK           reduce using rule 9 (statement -> while_stmt .)
    WHILE           reduce using rule 9 (statement -> while_stmt .)
    IF              reduce using rule 9 (statement -> while_stmt .)
    FUNC            reduce using rule 9 (statement -> while_stmt .)
    CONST           reduce using rule 9 (statement -> while_stmt .)
    VAR             reduce using rule 9 (statement -> while_stmt .)
    IMPORT          reduce using rule 9 (statement -> while_stmt .)
    `               reduce using rule 9 (statement -> while_stmt .)
    ID              reduce using rule 9 (statement -> while_stmt .)
    $end            reduce using rule 9 (statement -> while_stmt .)
    }               reduce using rule 9 (statement -> while_stmt .)


state 9

    (10) statement -> if_stmt .
    PRINT           reduce using rule 10 (statement -> if_stmt .)
    RETURN          reduce using rule 10 (statement -> if_stmt .)
    CONTINUE        reduce using rule 10 (statement -> if_stmt .)
    BREAK           reduce using rule 10 (statement -> if_stmt .)
    WHILE           reduce using rule 10 (statement -> if_stmt .)
    IF              reduce using rule 10 (statement -> if_stmt .)
    FUNC            reduce using rule 10 (statement -> if_stmt .)
    CONST           reduce using rule 10 (statement -> if_stmt .)
    VAR             reduce using rule 10 (statement -> if_stmt .)
    IMPORT          reduce using rule 10 (statement -> if_stmt .)
    `               reduce using rule 10 (statement -> if_stmt .)
    ID              reduce using rule 10 (statement -> if_stmt .)
    $end            reduce using rule 10 (statement -> if_stmt .)
    }               reduce using rule 10 (statement -> if_stmt .)


state 10

    (11) statement -> funcdecl .
    PRINT           reduce using rule 11 (statement -> funcdecl .)
    RETURN          reduce using rule 11 (statement -> funcdecl .)
    CONTINUE        reduce using rule 11 (statement -> funcdecl .)
    BREAK           reduce using rule 11 (statement -> funcdecl .)
    WHILE           reduce using rule 11 (statement -> funcdecl .)
    IF              reduce using rule 11 (statement -> funcdecl .)
    FUNC            reduce using rule 11 (statement -> funcdecl .)
    CONST           reduce using rule 11 (statement -> funcdecl .)
    VAR             reduce using rule 11 (statement -> funcdecl .)
    IMPORT          reduce using rule 11 (statement -> funcdecl .)
    `               reduce using rule 11 (statement -> funcdecl .)
    ID              reduce using rule 11 (statement -> funcdecl .)
    $end            reduce using rule 11 (statement -> funcdecl .)
    }               reduce using rule 11 (statement -> funcdecl .)


state 11

    (12) statement -> assignment .
    PRINT           reduce using rule 12 (statement -> assignment .)
    RETURN          reduce using rule 12 (statement -> assignment .)
    CONTINUE        reduce using rule 12 (statement -> assignment .)
    BREAK           reduce using rule 12 (statement -> assignment .)
    WHILE           reduce using rule 12 (statement -> assignment .)
    IF              reduce using rule 12 (statement -> assignment .)
    FUNC            reduce using rule 12 (statement -> assignment .)
    CONST           reduce using rule 12 (statement -> assignment .)
    VAR             reduce using rule 12 (statement -> assignment .)
    IMPORT          reduce using rule 12 (statement -> assignment .)
    `               reduce using rule 12 (statement -> assignment .)
    ID              reduce using rule 12 (statement -> assignment .)
    $end            reduce using rule 12 (statement -> assignment .)
    }               reduce using rule 12 (statement -> assignment .)


state 12

    (13) statement -> vardecl .
    PRINT           reduce using rule 13 (statement -> vardecl .)
    RETURN          reduce using rule 13 (statement -> vardecl .)
    CONTINUE        reduce using rule 13 (statement -> vardecl .)
    BREAK           reduce using rule 13 (statement -> vardecl .)
    WHILE           reduce using rule 13 (statement -> vardecl .)
    IF              reduce using rule 13 (statement -> vardecl .)
    FUNC            reduce using rule 13 (statement -> vardecl .)
    CONST           reduce using rule 13 (statement -> vardecl .)
    VAR             reduce using rule 13 (statement -> vardecl .)
    IMPORT          reduce using rule 13 (statement -> vardecl .)
    `               reduce using rule 13 (statement -> vardecl .)
    ID              reduce using rule 13 (statement -> vardecl .)
    $end            reduce using rule 13 (statement -> vardecl .)
    }               reduce using rule 13 (statement -> vardecl .)


state 13

    (38) while_stmt -> WHILE . expression { statement_list }
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 42
    location                       shift and go to state 30
    type                           shift and go to state 32

state 14

    (36) if_stmt -> IF . expression { statement_list }
    (37) if_stmt -> IF . expression { statement_list } ELSE { statement_list }
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 43
    location                       shift and go to state 30
    type                           shift and go to state 32

state 15

    (21) funcdecl -> opt_import . FUNC ID ( parameters_opt ) type_opt { statement_list }
    FUNC            shift and go to state 44


state 16

    (22) funcdecl -> FUNC . ID ( parameters_opt ) type_opt { statement_list }
    ID              shift and go to state 45


state 17

    (40) location -> ID .
    =               reduce using rule 40 (location -> ID .)


state 18

    (20) assignment -> location . = expression ;
    =               shift and go to state 46


state 19

    (14) vardecl -> CONST . ID type opt_init ;
    ID              shift and go to state 47


state 20

    (15) vardecl -> VAR . ID opt_type opt_init ;
    ID              shift and go to state 48


state 21

    (24) opt_import -> IMPORT .
    FUNC            reduce using rule 24 (opt_import -> IMPORT .)


state 22

    (39) location -> ` . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 49
    location                       shift and go to state 30
    type                           shift and go to state 32

state 23

    (3) statement_list -> statement_list statement .
    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 3 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 3 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    FUNC            reduce using rule 3 (statement_list -> statement_list statement .)
    CONST           reduce using rule 3 (statement_list -> statement_list statement .)
    VAR             reduce using rule 3 (statement_list -> statement_list statement .)
    IMPORT          reduce using rule 3 (statement_list -> statement_list statement .)
    `               reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    }               reduce using rule 3 (statement_list -> statement_list statement .)


state 24

    (4) statement -> PRINT ( . expression ) ;
    (48) expression -> ( . expression )
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 50
    location                       shift and go to state 30
    type                           shift and go to state 32

state 25

    (5) statement -> PRINT expression . ;
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    ;               shift and go to state 51
    LOR             shift and go to state 52
    LAND            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62
    -               shift and go to state 63
    +               shift and go to state 64


state 26

    (41) expression -> BOOL .
    ;               reduce using rule 41 (expression -> BOOL .)
    LOR             reduce using rule 41 (expression -> BOOL .)
    LAND            reduce using rule 41 (expression -> BOOL .)
    NE              reduce using rule 41 (expression -> BOOL .)
    EQ              reduce using rule 41 (expression -> BOOL .)
    GE              reduce using rule 41 (expression -> BOOL .)
    LE              reduce using rule 41 (expression -> BOOL .)
    GT              reduce using rule 41 (expression -> BOOL .)
    LT              reduce using rule 41 (expression -> BOOL .)
    %               reduce using rule 41 (expression -> BOOL .)
    /               reduce using rule 41 (expression -> BOOL .)
    *               reduce using rule 41 (expression -> BOOL .)
    -               reduce using rule 41 (expression -> BOOL .)
    +               reduce using rule 41 (expression -> BOOL .)
    {               reduce using rule 41 (expression -> BOOL .)
    =               reduce using rule 41 (expression -> BOOL .)
    )               reduce using rule 41 (expression -> BOOL .)
    ,               reduce using rule 41 (expression -> BOOL .)


state 27

    (42) expression -> CHAR .
    ;               reduce using rule 42 (expression -> CHAR .)
    LOR             reduce using rule 42 (expression -> CHAR .)
    LAND            reduce using rule 42 (expression -> CHAR .)
    NE              reduce using rule 42 (expression -> CHAR .)
    EQ              reduce using rule 42 (expression -> CHAR .)
    GE              reduce using rule 42 (expression -> CHAR .)
    LE              reduce using rule 42 (expression -> CHAR .)
    GT              reduce using rule 42 (expression -> CHAR .)
    LT              reduce using rule 42 (expression -> CHAR .)
    %               reduce using rule 42 (expression -> CHAR .)
    /               reduce using rule 42 (expression -> CHAR .)
    *               reduce using rule 42 (expression -> CHAR .)
    -               reduce using rule 42 (expression -> CHAR .)
    +               reduce using rule 42 (expression -> CHAR .)
    {               reduce using rule 42 (expression -> CHAR .)
    =               reduce using rule 42 (expression -> CHAR .)
    )               reduce using rule 42 (expression -> CHAR .)
    ,               reduce using rule 42 (expression -> CHAR .)


state 28

    (43) expression -> FLOAT .
    ;               reduce using rule 43 (expression -> FLOAT .)
    LOR             reduce using rule 43 (expression -> FLOAT .)
    LAND            reduce using rule 43 (expression -> FLOAT .)
    NE              reduce using rule 43 (expression -> FLOAT .)
    EQ              reduce using rule 43 (expression -> FLOAT .)
    GE              reduce using rule 43 (expression -> FLOAT .)
    LE              reduce using rule 43 (expression -> FLOAT .)
    GT              reduce using rule 43 (expression -> FLOAT .)
    LT              reduce using rule 43 (expression -> FLOAT .)
    %               reduce using rule 43 (expression -> FLOAT .)
    /               reduce using rule 43 (expression -> FLOAT .)
    *               reduce using rule 43 (expression -> FLOAT .)
    -               reduce using rule 43 (expression -> FLOAT .)
    +               reduce using rule 43 (expression -> FLOAT .)
    {               reduce using rule 43 (expression -> FLOAT .)
    =               reduce using rule 43 (expression -> FLOAT .)
    )               reduce using rule 43 (expression -> FLOAT .)
    ,               reduce using rule 43 (expression -> FLOAT .)


state 29

    (44) expression -> INTEGER .
    ;               reduce using rule 44 (expression -> INTEGER .)
    LOR             reduce using rule 44 (expression -> INTEGER .)
    LAND            reduce using rule 44 (expression -> INTEGER .)
    NE              reduce using rule 44 (expression -> INTEGER .)
    EQ              reduce using rule 44 (expression -> INTEGER .)
    GE              reduce using rule 44 (expression -> INTEGER .)
    LE              reduce using rule 44 (expression -> INTEGER .)
    GT              reduce using rule 44 (expression -> INTEGER .)
    LT              reduce using rule 44 (expression -> INTEGER .)
    %               reduce using rule 44 (expression -> INTEGER .)
    /               reduce using rule 44 (expression -> INTEGER .)
    *               reduce using rule 44 (expression -> INTEGER .)
    -               reduce using rule 44 (expression -> INTEGER .)
    +               reduce using rule 44 (expression -> INTEGER .)
    {               reduce using rule 44 (expression -> INTEGER .)
    =               reduce using rule 44 (expression -> INTEGER .)
    )               reduce using rule 44 (expression -> INTEGER .)
    ,               reduce using rule 44 (expression -> INTEGER .)


state 30

    (45) expression -> location .
    ;               reduce using rule 45 (expression -> location .)
    LOR             reduce using rule 45 (expression -> location .)
    LAND            reduce using rule 45 (expression -> location .)
    NE              reduce using rule 45 (expression -> location .)
    EQ              reduce using rule 45 (expression -> location .)
    GE              reduce using rule 45 (expression -> location .)
    LE              reduce using rule 45 (expression -> location .)
    GT              reduce using rule 45 (expression -> location .)
    LT              reduce using rule 45 (expression -> location .)
    %               reduce using rule 45 (expression -> location .)
    /               reduce using rule 45 (expression -> location .)
    *               reduce using rule 45 (expression -> location .)
    -               reduce using rule 45 (expression -> location .)
    +               reduce using rule 45 (expression -> location .)
    {               reduce using rule 45 (expression -> location .)
    =               reduce using rule 45 (expression -> location .)
    )               reduce using rule 45 (expression -> location .)
    ,               reduce using rule 45 (expression -> location .)


state 31

    (46) expression -> ID . ( arguments_opt )
    (40) location -> ID .
    (               shift and go to state 65
    ;               reduce using rule 40 (location -> ID .)
    LOR             reduce using rule 40 (location -> ID .)
    LAND            reduce using rule 40 (location -> ID .)
    NE              reduce using rule 40 (location -> ID .)
    EQ              reduce using rule 40 (location -> ID .)
    GE              reduce using rule 40 (location -> ID .)
    LE              reduce using rule 40 (location -> ID .)
    GT              reduce using rule 40 (location -> ID .)
    LT              reduce using rule 40 (location -> ID .)
    %               reduce using rule 40 (location -> ID .)
    /               reduce using rule 40 (location -> ID .)
    *               reduce using rule 40 (location -> ID .)
    -               reduce using rule 40 (location -> ID .)
    +               reduce using rule 40 (location -> ID .)
    {               reduce using rule 40 (location -> ID .)
    =               reduce using rule 40 (location -> ID .)
    )               reduce using rule 40 (location -> ID .)
    ,               reduce using rule 40 (location -> ID .)


state 32

    (47) expression -> type . ( expression )
    (               shift and go to state 66


state 33

    (57) expression -> - . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 67
    location                       shift and go to state 30
    type                           shift and go to state 32

state 34

    (32) type -> BOOL_TYPE .
    (               reduce using rule 32 (type -> BOOL_TYPE .)
    =               reduce using rule 32 (type -> BOOL_TYPE .)
    ;               reduce using rule 32 (type -> BOOL_TYPE .)
    ,               reduce using rule 32 (type -> BOOL_TYPE .)
    )               reduce using rule 32 (type -> BOOL_TYPE .)
    {               reduce using rule 32 (type -> BOOL_TYPE .)


state 35

    (33) type -> CHAR_TYPE .
    (               reduce using rule 33 (type -> CHAR_TYPE .)
    =               reduce using rule 33 (type -> CHAR_TYPE .)
    ;               reduce using rule 33 (type -> CHAR_TYPE .)
    ,               reduce using rule 33 (type -> CHAR_TYPE .)
    )               reduce using rule 33 (type -> CHAR_TYPE .)
    {               reduce using rule 33 (type -> CHAR_TYPE .)


state 36

    (34) type -> FLOAT_TYPE .
    (               reduce using rule 34 (type -> FLOAT_TYPE .)
    =               reduce using rule 34 (type -> FLOAT_TYPE .)
    ;               reduce using rule 34 (type -> FLOAT_TYPE .)
    ,               reduce using rule 34 (type -> FLOAT_TYPE .)
    )               reduce using rule 34 (type -> FLOAT_TYPE .)
    {               reduce using rule 34 (type -> FLOAT_TYPE .)


state 37

    (35) type -> INT_TYPE .
    (               reduce using rule 35 (type -> INT_TYPE .)
    =               reduce using rule 35 (type -> INT_TYPE .)
    ;               reduce using rule 35 (type -> INT_TYPE .)
    ,               reduce using rule 35 (type -> INT_TYPE .)
    )               reduce using rule 35 (type -> INT_TYPE .)
    {               reduce using rule 35 (type -> INT_TYPE .)


state 38

    (6) statement -> RETURN expression . ;
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    ;               shift and go to state 68
    LOR             shift and go to state 52
    LAND            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62
    -               shift and go to state 63
    +               shift and go to state 64


state 39

    (48) expression -> ( . expression )
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 69
    location                       shift and go to state 30
    type                           shift and go to state 32

state 40

    (7) statement -> CONTINUE ; .
    PRINT           reduce using rule 7 (statement -> CONTINUE ; .)
    RETURN          reduce using rule 7 (statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 7 (statement -> CONTINUE ; .)
    BREAK           reduce using rule 7 (statement -> CONTINUE ; .)
    WHILE           reduce using rule 7 (statement -> CONTINUE ; .)
    IF              reduce using rule 7 (statement -> CONTINUE ; .)
    FUNC            reduce using rule 7 (statement -> CONTINUE ; .)
    CONST           reduce using rule 7 (statement -> CONTINUE ; .)
    VAR             reduce using rule 7 (statement -> CONTINUE ; .)
    IMPORT          reduce using rule 7 (statement -> CONTINUE ; .)
    `               reduce using rule 7 (statement -> CONTINUE ; .)
    ID              reduce using rule 7 (statement -> CONTINUE ; .)
    $end            reduce using rule 7 (statement -> CONTINUE ; .)
    }               reduce using rule 7 (statement -> CONTINUE ; .)


state 41

    (8) statement -> BREAK ; .
    PRINT           reduce using rule 8 (statement -> BREAK ; .)
    RETURN          reduce using rule 8 (statement -> BREAK ; .)
    CONTINUE        reduce using rule 8 (statement -> BREAK ; .)
    BREAK           reduce using rule 8 (statement -> BREAK ; .)
    WHILE           reduce using rule 8 (statement -> BREAK ; .)
    IF              reduce using rule 8 (statement -> BREAK ; .)
    FUNC            reduce using rule 8 (statement -> BREAK ; .)
    CONST           reduce using rule 8 (statement -> BREAK ; .)
    VAR             reduce using rule 8 (statement -> BREAK ; .)
    IMPORT          reduce using rule 8 (statement -> BREAK ; .)
    `               reduce using rule 8 (statement -> BREAK ; .)
    ID              reduce using rule 8 (statement -> BREAK ; .)
    $end            reduce using rule 8 (statement -> BREAK ; .)
    }               reduce using rule 8 (statement -> BREAK ; .)


state 42

    (38) while_stmt -> WHILE expression . { statement_list }
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    {               shift and go to state 70
    LOR             shift and go to state 52
    LAND            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62
    -               shift and go to state 63
    +               shift and go to state 64


state 43

    (36) if_stmt -> IF expression . { statement_list }
    (37) if_stmt -> IF expression . { statement_list } ELSE { statement_list }
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    {               shift and go to state 71
    LOR             shift and go to state 52
    LAND            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62
    -               shift and go to state 63
    +               shift and go to state 64


state 44

    (21) funcdecl -> opt_import FUNC . ID ( parameters_opt ) type_opt { statement_list }
    ID              shift and go to state 72


state 45

    (22) funcdecl -> FUNC ID . ( parameters_opt ) type_opt { statement_list }
    (               shift and go to state 73


state 46

    (20) assignment -> location = . expression ;
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    location                       shift and go to state 30
    expression                     shift and go to state 74
    type                           shift and go to state 32

state 47

    (14) vardecl -> CONST ID . type opt_init ;
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    type                           shift and go to state 75

state 48

    (15) vardecl -> VAR ID . opt_type opt_init ;
    (18) opt_type -> .
    (19) opt_type -> . type
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    =               reduce using rule 18 (opt_type -> .)
    ;               reduce using rule 18 (opt_type -> .)
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    opt_type                       shift and go to state 76
    type                           shift and go to state 77

state 49

    (39) location -> ` expression .
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
  ! shift/reduce conflict for LOR resolved as shift
  ! shift/reduce conflict for LAND resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    =               reduce using rule 39 (location -> ` expression .)
    ;               reduce using rule 39 (location -> ` expression .)
    {               reduce using rule 39 (location -> ` expression .)
    )               reduce using rule 39 (location -> ` expression .)
    ,               reduce using rule 39 (location -> ` expression .)
    LOR             shift and go to state 52
    LAND            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62
    -               shift and go to state 63
    +               shift and go to state 64


state 50

    (4) statement -> PRINT ( expression . ) ;
    (48) expression -> ( expression . )
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    )               shift and go to state 78
    LOR             shift and go to state 52
    LAND            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62
    -               shift and go to state 63
    +               shift and go to state 64


state 51

    (5) statement -> PRINT expression ; .
    PRINT           reduce using rule 5 (statement -> PRINT expression ; .)
    RETURN          reduce using rule 5 (statement -> PRINT expression ; .)
    CONTINUE        reduce using rule 5 (statement -> PRINT expression ; .)
    BREAK           reduce using rule 5 (statement -> PRINT expression ; .)
    WHILE           reduce using rule 5 (statement -> PRINT expression ; .)
    IF              reduce using rule 5 (statement -> PRINT expression ; .)
    FUNC            reduce using rule 5 (statement -> PRINT expression ; .)
    CONST           reduce using rule 5 (statement -> PRINT expression ; .)
    VAR             reduce using rule 5 (statement -> PRINT expression ; .)
    IMPORT          reduce using rule 5 (statement -> PRINT expression ; .)
    `               reduce using rule 5 (statement -> PRINT expression ; .)
    ID              reduce using rule 5 (statement -> PRINT expression ; .)
    $end            reduce using rule 5 (statement -> PRINT expression ; .)
    }               reduce using rule 5 (statement -> PRINT expression ; .)


state 52

    (49) expression -> expression LOR . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 79
    location                       shift and go to state 30
    type                           shift and go to state 32

state 53

    (50) expression -> expression LAND . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 80
    location                       shift and go to state 30
    type                           shift and go to state 32

state 54

    (51) expression -> expression NE . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 81
    location                       shift and go to state 30
    type                           shift and go to state 32

state 55

    (52) expression -> expression EQ . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 82
    location                       shift and go to state 30
    type                           shift and go to state 32

state 56

    (53) expression -> expression GE . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 83
    location                       shift and go to state 30
    type                           shift and go to state 32

state 57

    (54) expression -> expression LE . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 84
    location                       shift and go to state 30
    type                           shift and go to state 32

state 58

    (55) expression -> expression GT . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 85
    location                       shift and go to state 30
    type                           shift and go to state 32

state 59

    (56) expression -> expression LT . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 86
    location                       shift and go to state 30
    type                           shift and go to state 32

state 60

    (58) expression -> expression % . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 87
    location                       shift and go to state 30
    type                           shift and go to state 32

state 61

    (59) expression -> expression / . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 88
    location                       shift and go to state 30
    type                           shift and go to state 32

state 62

    (60) expression -> expression * . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 89
    location                       shift and go to state 30
    type                           shift and go to state 32

state 63

    (61) expression -> expression - . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 90
    location                       shift and go to state 30
    type                           shift and go to state 32

state 64

    (62) expression -> expression + . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 91
    location                       shift and go to state 30
    type                           shift and go to state 32

state 65

    (46) expression -> ID ( . arguments_opt )
    (69) arguments_opt -> .
    (70) arguments_opt -> . arguments
    (63) arguments -> . expression _1_222c22_expression_repeat
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    )               reduce using rule 69 (arguments_opt -> .)
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    arguments_opt                  shift and go to state 92
    arguments                      shift and go to state 93
    expression                     shift and go to state 94
    location                       shift and go to state 30
    type                           shift and go to state 32

state 66

    (47) expression -> type ( . expression )
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    type                           shift and go to state 32
    expression                     shift and go to state 95
    location                       shift and go to state 30

state 67

    (57) expression -> - expression .
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    ;               reduce using rule 57 (expression -> - expression .)
    LOR             reduce using rule 57 (expression -> - expression .)
    LAND            reduce using rule 57 (expression -> - expression .)
    NE              reduce using rule 57 (expression -> - expression .)
    EQ              reduce using rule 57 (expression -> - expression .)
    GE              reduce using rule 57 (expression -> - expression .)
    LE              reduce using rule 57 (expression -> - expression .)
    GT              reduce using rule 57 (expression -> - expression .)
    LT              reduce using rule 57 (expression -> - expression .)
    %               reduce using rule 57 (expression -> - expression .)
    /               reduce using rule 57 (expression -> - expression .)
    *               reduce using rule 57 (expression -> - expression .)
    -               reduce using rule 57 (expression -> - expression .)
    +               reduce using rule 57 (expression -> - expression .)
    {               reduce using rule 57 (expression -> - expression .)
    =               reduce using rule 57 (expression -> - expression .)
    )               reduce using rule 57 (expression -> - expression .)
    ,               reduce using rule 57 (expression -> - expression .)


state 68

    (6) statement -> RETURN expression ; .
    PRINT           reduce using rule 6 (statement -> RETURN expression ; .)
    RETURN          reduce using rule 6 (statement -> RETURN expression ; .)
    CONTINUE        reduce using rule 6 (statement -> RETURN expression ; .)
    BREAK           reduce using rule 6 (statement -> RETURN expression ; .)
    WHILE           reduce using rule 6 (statement -> RETURN expression ; .)
    IF              reduce using rule 6 (statement -> RETURN expression ; .)
    FUNC            reduce using rule 6 (statement -> RETURN expression ; .)
    CONST           reduce using rule 6 (statement -> RETURN expression ; .)
    VAR             reduce using rule 6 (statement -> RETURN expression ; .)
    IMPORT          reduce using rule 6 (statement -> RETURN expression ; .)
    `               reduce using rule 6 (statement -> RETURN expression ; .)
    ID              reduce using rule 6 (statement -> RETURN expression ; .)
    $end            reduce using rule 6 (statement -> RETURN expression ; .)
    }               reduce using rule 6 (statement -> RETURN expression ; .)


state 69

    (48) expression -> ( expression . )
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    )               shift and go to state 96
    LOR             shift and go to state 52
    LAND            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62
    -               shift and go to state 63
    +               shift and go to state 64


state 70

    (38) while_stmt -> WHILE expression { . statement_list }
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . PRINT ( expression ) ;
    (5) statement -> . PRINT expression ;
    (6) statement -> . RETURN expression ;
    (7) statement -> . CONTINUE ;
    (8) statement -> . BREAK ;
    (9) statement -> . while_stmt
    (10) statement -> . if_stmt
    (11) statement -> . funcdecl
    (12) statement -> . assignment
    (13) statement -> . vardecl
    (38) while_stmt -> . WHILE expression { statement_list }
    (36) if_stmt -> . IF expression { statement_list }
    (37) if_stmt -> . IF expression { statement_list } ELSE { statement_list }
    (21) funcdecl -> . opt_import FUNC ID ( parameters_opt ) type_opt { statement_list }
    (22) funcdecl -> . FUNC ID ( parameters_opt ) type_opt { statement_list }
    (20) assignment -> . location = expression ;
    (14) vardecl -> . CONST ID type opt_init ;
    (15) vardecl -> . VAR ID opt_type opt_init ;
    (23) opt_import -> .
    (24) opt_import -> . IMPORT
    (39) location -> . ` expression
    (40) location -> . ID
  ! shift/reduce conflict for FUNC resolved as shift
    PRINT           shift and go to state 4
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    WHILE           shift and go to state 13
    IF              shift and go to state 14
    FUNC            shift and go to state 16
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    IMPORT          shift and go to state 21
    `               shift and go to state 22
    ID              shift and go to state 17

    statement_list                 shift and go to state 97
    statement                      shift and go to state 3
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    opt_import                     shift and go to state 15
    location                       shift and go to state 18

state 71

    (36) if_stmt -> IF expression { . statement_list }
    (37) if_stmt -> IF expression { . statement_list } ELSE { statement_list }
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . PRINT ( expression ) ;
    (5) statement -> . PRINT expression ;
    (6) statement -> . RETURN expression ;
    (7) statement -> . CONTINUE ;
    (8) statement -> . BREAK ;
    (9) statement -> . while_stmt
    (10) statement -> . if_stmt
    (11) statement -> . funcdecl
    (12) statement -> . assignment
    (13) statement -> . vardecl
    (38) while_stmt -> . WHILE expression { statement_list }
    (36) if_stmt -> . IF expression { statement_list }
    (37) if_stmt -> . IF expression { statement_list } ELSE { statement_list }
    (21) funcdecl -> . opt_import FUNC ID ( parameters_opt ) type_opt { statement_list }
    (22) funcdecl -> . FUNC ID ( parameters_opt ) type_opt { statement_list }
    (20) assignment -> . location = expression ;
    (14) vardecl -> . CONST ID type opt_init ;
    (15) vardecl -> . VAR ID opt_type opt_init ;
    (23) opt_import -> .
    (24) opt_import -> . IMPORT
    (39) location -> . ` expression
    (40) location -> . ID
  ! shift/reduce conflict for FUNC resolved as shift
    PRINT           shift and go to state 4
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    WHILE           shift and go to state 13
    IF              shift and go to state 14
    FUNC            shift and go to state 16
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    IMPORT          shift and go to state 21
    `               shift and go to state 22
    ID              shift and go to state 17

    statement_list                 shift and go to state 98
    statement                      shift and go to state 3
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    opt_import                     shift and go to state 15
    location                       shift and go to state 18

state 72

    (21) funcdecl -> opt_import FUNC ID . ( parameters_opt ) type_opt { statement_list }
    (               shift and go to state 99


state 73

    (22) funcdecl -> FUNC ID ( . parameters_opt ) type_opt { statement_list }
    (25) parameters_opt -> .
    (26) parameters_opt -> . parameters
    (29) parameters -> . parameters , param
    (30) parameters -> . param
    (31) param -> . ID type
    )               reduce using rule 25 (parameters_opt -> .)
    ID              shift and go to state 100

    parameters_opt                 shift and go to state 101
    parameters                     shift and go to state 102
    param                          shift and go to state 103

state 74

    (20) assignment -> location = expression . ;
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    ;               shift and go to state 104
    LOR             shift and go to state 52
    LAND            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62
    -               shift and go to state 63
    +               shift and go to state 64


state 75

    (14) vardecl -> CONST ID type . opt_init ;
    (16) opt_init -> .
    (17) opt_init -> . = expression
    ;               reduce using rule 16 (opt_init -> .)
    =               shift and go to state 106

    opt_init                       shift and go to state 105

state 76

    (15) vardecl -> VAR ID opt_type . opt_init ;
    (16) opt_init -> .
    (17) opt_init -> . = expression
    ;               reduce using rule 16 (opt_init -> .)
    =               shift and go to state 106

    opt_init                       shift and go to state 107

state 77

    (19) opt_type -> type .
    =               reduce using rule 19 (opt_type -> type .)
    ;               reduce using rule 19 (opt_type -> type .)


state 78

    (4) statement -> PRINT ( expression ) . ;
    (48) expression -> ( expression ) .
  ! shift/reduce conflict for ; resolved as shift
    ;               shift and go to state 108
    LOR             reduce using rule 48 (expression -> ( expression ) .)
    LAND            reduce using rule 48 (expression -> ( expression ) .)
    NE              reduce using rule 48 (expression -> ( expression ) .)
    EQ              reduce using rule 48 (expression -> ( expression ) .)
    GE              reduce using rule 48 (expression -> ( expression ) .)
    LE              reduce using rule 48 (expression -> ( expression ) .)
    GT              reduce using rule 48 (expression -> ( expression ) .)
    LT              reduce using rule 48 (expression -> ( expression ) .)
    %               reduce using rule 48 (expression -> ( expression ) .)
    /               reduce using rule 48 (expression -> ( expression ) .)
    *               reduce using rule 48 (expression -> ( expression ) .)
    -               reduce using rule 48 (expression -> ( expression ) .)
    +               reduce using rule 48 (expression -> ( expression ) .)


state 79

    (49) expression -> expression LOR expression .
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    ;               reduce using rule 49 (expression -> expression LOR expression .)
    LOR             reduce using rule 49 (expression -> expression LOR expression .)
    {               reduce using rule 49 (expression -> expression LOR expression .)
    =               reduce using rule 49 (expression -> expression LOR expression .)
    )               reduce using rule 49 (expression -> expression LOR expression .)
    ,               reduce using rule 49 (expression -> expression LOR expression .)
    LAND            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62
    -               shift and go to state 63
    +               shift and go to state 64


state 80

    (50) expression -> expression LAND expression .
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    ;               reduce using rule 50 (expression -> expression LAND expression .)
    LOR             reduce using rule 50 (expression -> expression LAND expression .)
    LAND            reduce using rule 50 (expression -> expression LAND expression .)
    {               reduce using rule 50 (expression -> expression LAND expression .)
    =               reduce using rule 50 (expression -> expression LAND expression .)
    )               reduce using rule 50 (expression -> expression LAND expression .)
    ,               reduce using rule 50 (expression -> expression LAND expression .)
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62
    -               shift and go to state 63
    +               shift and go to state 64


state 81

    (51) expression -> expression NE expression .
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    ;               reduce using rule 51 (expression -> expression NE expression .)
    LOR             reduce using rule 51 (expression -> expression NE expression .)
    LAND            reduce using rule 51 (expression -> expression NE expression .)
    NE              reduce using rule 51 (expression -> expression NE expression .)
    EQ              reduce using rule 51 (expression -> expression NE expression .)
    {               reduce using rule 51 (expression -> expression NE expression .)
    =               reduce using rule 51 (expression -> expression NE expression .)
    )               reduce using rule 51 (expression -> expression NE expression .)
    ,               reduce using rule 51 (expression -> expression NE expression .)
    GE              shift and go to state 56
    LE              shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62
    -               shift and go to state 63
    +               shift and go to state 64


state 82

    (52) expression -> expression EQ expression .
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    ;               reduce using rule 52 (expression -> expression EQ expression .)
    LOR             reduce using rule 52 (expression -> expression EQ expression .)
    LAND            reduce using rule 52 (expression -> expression EQ expression .)
    NE              reduce using rule 52 (expression -> expression EQ expression .)
    EQ              reduce using rule 52 (expression -> expression EQ expression .)
    {               reduce using rule 52 (expression -> expression EQ expression .)
    =               reduce using rule 52 (expression -> expression EQ expression .)
    )               reduce using rule 52 (expression -> expression EQ expression .)
    ,               reduce using rule 52 (expression -> expression EQ expression .)
    GE              shift and go to state 56
    LE              shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62
    -               shift and go to state 63
    +               shift and go to state 64


state 83

    (53) expression -> expression GE expression .
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    ;               reduce using rule 53 (expression -> expression GE expression .)
    LOR             reduce using rule 53 (expression -> expression GE expression .)
    LAND            reduce using rule 53 (expression -> expression GE expression .)
    NE              reduce using rule 53 (expression -> expression GE expression .)
    EQ              reduce using rule 53 (expression -> expression GE expression .)
    GE              reduce using rule 53 (expression -> expression GE expression .)
    LE              reduce using rule 53 (expression -> expression GE expression .)
    GT              reduce using rule 53 (expression -> expression GE expression .)
    LT              reduce using rule 53 (expression -> expression GE expression .)
    {               reduce using rule 53 (expression -> expression GE expression .)
    =               reduce using rule 53 (expression -> expression GE expression .)
    )               reduce using rule 53 (expression -> expression GE expression .)
    ,               reduce using rule 53 (expression -> expression GE expression .)
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62
    -               shift and go to state 63
    +               shift and go to state 64


state 84

    (54) expression -> expression LE expression .
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    ;               reduce using rule 54 (expression -> expression LE expression .)
    LOR             reduce using rule 54 (expression -> expression LE expression .)
    LAND            reduce using rule 54 (expression -> expression LE expression .)
    NE              reduce using rule 54 (expression -> expression LE expression .)
    EQ              reduce using rule 54 (expression -> expression LE expression .)
    GE              reduce using rule 54 (expression -> expression LE expression .)
    LE              reduce using rule 54 (expression -> expression LE expression .)
    GT              reduce using rule 54 (expression -> expression LE expression .)
    LT              reduce using rule 54 (expression -> expression LE expression .)
    {               reduce using rule 54 (expression -> expression LE expression .)
    =               reduce using rule 54 (expression -> expression LE expression .)
    )               reduce using rule 54 (expression -> expression LE expression .)
    ,               reduce using rule 54 (expression -> expression LE expression .)
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62
    -               shift and go to state 63
    +               shift and go to state 64


state 85

    (55) expression -> expression GT expression .
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    ;               reduce using rule 55 (expression -> expression GT expression .)
    LOR             reduce using rule 55 (expression -> expression GT expression .)
    LAND            reduce using rule 55 (expression -> expression GT expression .)
    NE              reduce using rule 55 (expression -> expression GT expression .)
    EQ              reduce using rule 55 (expression -> expression GT expression .)
    GE              reduce using rule 55 (expression -> expression GT expression .)
    LE              reduce using rule 55 (expression -> expression GT expression .)
    GT              reduce using rule 55 (expression -> expression GT expression .)
    LT              reduce using rule 55 (expression -> expression GT expression .)
    {               reduce using rule 55 (expression -> expression GT expression .)
    =               reduce using rule 55 (expression -> expression GT expression .)
    )               reduce using rule 55 (expression -> expression GT expression .)
    ,               reduce using rule 55 (expression -> expression GT expression .)
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62
    -               shift and go to state 63
    +               shift and go to state 64


state 86

    (56) expression -> expression LT expression .
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    ;               reduce using rule 56 (expression -> expression LT expression .)
    LOR             reduce using rule 56 (expression -> expression LT expression .)
    LAND            reduce using rule 56 (expression -> expression LT expression .)
    NE              reduce using rule 56 (expression -> expression LT expression .)
    EQ              reduce using rule 56 (expression -> expression LT expression .)
    GE              reduce using rule 56 (expression -> expression LT expression .)
    LE              reduce using rule 56 (expression -> expression LT expression .)
    GT              reduce using rule 56 (expression -> expression LT expression .)
    LT              reduce using rule 56 (expression -> expression LT expression .)
    {               reduce using rule 56 (expression -> expression LT expression .)
    =               reduce using rule 56 (expression -> expression LT expression .)
    )               reduce using rule 56 (expression -> expression LT expression .)
    ,               reduce using rule 56 (expression -> expression LT expression .)
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62
    -               shift and go to state 63
    +               shift and go to state 64


state 87

    (58) expression -> expression % expression .
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    ;               reduce using rule 58 (expression -> expression % expression .)
    LOR             reduce using rule 58 (expression -> expression % expression .)
    LAND            reduce using rule 58 (expression -> expression % expression .)
    NE              reduce using rule 58 (expression -> expression % expression .)
    EQ              reduce using rule 58 (expression -> expression % expression .)
    GE              reduce using rule 58 (expression -> expression % expression .)
    LE              reduce using rule 58 (expression -> expression % expression .)
    GT              reduce using rule 58 (expression -> expression % expression .)
    LT              reduce using rule 58 (expression -> expression % expression .)
    %               reduce using rule 58 (expression -> expression % expression .)
    /               reduce using rule 58 (expression -> expression % expression .)
    *               reduce using rule 58 (expression -> expression % expression .)
    -               reduce using rule 58 (expression -> expression % expression .)
    +               reduce using rule 58 (expression -> expression % expression .)
    {               reduce using rule 58 (expression -> expression % expression .)
    =               reduce using rule 58 (expression -> expression % expression .)
    )               reduce using rule 58 (expression -> expression % expression .)
    ,               reduce using rule 58 (expression -> expression % expression .)


state 88

    (59) expression -> expression / expression .
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    ;               reduce using rule 59 (expression -> expression / expression .)
    LOR             reduce using rule 59 (expression -> expression / expression .)
    LAND            reduce using rule 59 (expression -> expression / expression .)
    NE              reduce using rule 59 (expression -> expression / expression .)
    EQ              reduce using rule 59 (expression -> expression / expression .)
    GE              reduce using rule 59 (expression -> expression / expression .)
    LE              reduce using rule 59 (expression -> expression / expression .)
    GT              reduce using rule 59 (expression -> expression / expression .)
    LT              reduce using rule 59 (expression -> expression / expression .)
    %               reduce using rule 59 (expression -> expression / expression .)
    /               reduce using rule 59 (expression -> expression / expression .)
    *               reduce using rule 59 (expression -> expression / expression .)
    -               reduce using rule 59 (expression -> expression / expression .)
    +               reduce using rule 59 (expression -> expression / expression .)
    {               reduce using rule 59 (expression -> expression / expression .)
    =               reduce using rule 59 (expression -> expression / expression .)
    )               reduce using rule 59 (expression -> expression / expression .)
    ,               reduce using rule 59 (expression -> expression / expression .)


state 89

    (60) expression -> expression * expression .
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    ;               reduce using rule 60 (expression -> expression * expression .)
    LOR             reduce using rule 60 (expression -> expression * expression .)
    LAND            reduce using rule 60 (expression -> expression * expression .)
    NE              reduce using rule 60 (expression -> expression * expression .)
    EQ              reduce using rule 60 (expression -> expression * expression .)
    GE              reduce using rule 60 (expression -> expression * expression .)
    LE              reduce using rule 60 (expression -> expression * expression .)
    GT              reduce using rule 60 (expression -> expression * expression .)
    LT              reduce using rule 60 (expression -> expression * expression .)
    %               reduce using rule 60 (expression -> expression * expression .)
    /               reduce using rule 60 (expression -> expression * expression .)
    *               reduce using rule 60 (expression -> expression * expression .)
    -               reduce using rule 60 (expression -> expression * expression .)
    +               reduce using rule 60 (expression -> expression * expression .)
    {               reduce using rule 60 (expression -> expression * expression .)
    =               reduce using rule 60 (expression -> expression * expression .)
    )               reduce using rule 60 (expression -> expression * expression .)
    ,               reduce using rule 60 (expression -> expression * expression .)


state 90

    (61) expression -> expression - expression .
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    ;               reduce using rule 61 (expression -> expression - expression .)
    LOR             reduce using rule 61 (expression -> expression - expression .)
    LAND            reduce using rule 61 (expression -> expression - expression .)
    NE              reduce using rule 61 (expression -> expression - expression .)
    EQ              reduce using rule 61 (expression -> expression - expression .)
    GE              reduce using rule 61 (expression -> expression - expression .)
    LE              reduce using rule 61 (expression -> expression - expression .)
    GT              reduce using rule 61 (expression -> expression - expression .)
    LT              reduce using rule 61 (expression -> expression - expression .)
    -               reduce using rule 61 (expression -> expression - expression .)
    +               reduce using rule 61 (expression -> expression - expression .)
    {               reduce using rule 61 (expression -> expression - expression .)
    =               reduce using rule 61 (expression -> expression - expression .)
    )               reduce using rule 61 (expression -> expression - expression .)
    ,               reduce using rule 61 (expression -> expression - expression .)
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62


state 91

    (62) expression -> expression + expression .
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    ;               reduce using rule 62 (expression -> expression + expression .)
    LOR             reduce using rule 62 (expression -> expression + expression .)
    LAND            reduce using rule 62 (expression -> expression + expression .)
    NE              reduce using rule 62 (expression -> expression + expression .)
    EQ              reduce using rule 62 (expression -> expression + expression .)
    GE              reduce using rule 62 (expression -> expression + expression .)
    LE              reduce using rule 62 (expression -> expression + expression .)
    GT              reduce using rule 62 (expression -> expression + expression .)
    LT              reduce using rule 62 (expression -> expression + expression .)
    -               reduce using rule 62 (expression -> expression + expression .)
    +               reduce using rule 62 (expression -> expression + expression .)
    {               reduce using rule 62 (expression -> expression + expression .)
    =               reduce using rule 62 (expression -> expression + expression .)
    )               reduce using rule 62 (expression -> expression + expression .)
    ,               reduce using rule 62 (expression -> expression + expression .)
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62


state 92

    (46) expression -> ID ( arguments_opt . )
    )               shift and go to state 109


state 93

    (70) arguments_opt -> arguments .
    )               reduce using rule 70 (arguments_opt -> arguments .)


state 94

    (63) arguments -> expression . _1_222c22_expression_repeat
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    (64) _1_222c22_expression_repeat -> . _1_222c22_expression_items
    (65) _1_222c22_expression_repeat -> .
    (66) _1_222c22_expression_items -> . _1_222c22_expression_items _1_222c22_expression_item
    (67) _1_222c22_expression_items -> . _1_222c22_expression_item
    (68) _1_222c22_expression_item -> . , expression
    LOR             shift and go to state 52
    LAND            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62
    -               shift and go to state 63
    +               shift and go to state 64
    )               reduce using rule 65 (_1_222c22_expression_repeat -> .)
    ,               shift and go to state 113

    _1_222c22_expression_repeat    shift and go to state 110
    _1_222c22_expression_items     shift and go to state 111
    _1_222c22_expression_item      shift and go to state 112

state 95

    (47) expression -> type ( expression . )
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    )               shift and go to state 114
    LOR             shift and go to state 52
    LAND            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62
    -               shift and go to state 63
    +               shift and go to state 64


state 96

    (48) expression -> ( expression ) .
    ;               reduce using rule 48 (expression -> ( expression ) .)
    LOR             reduce using rule 48 (expression -> ( expression ) .)
    LAND            reduce using rule 48 (expression -> ( expression ) .)
    NE              reduce using rule 48 (expression -> ( expression ) .)
    EQ              reduce using rule 48 (expression -> ( expression ) .)
    GE              reduce using rule 48 (expression -> ( expression ) .)
    LE              reduce using rule 48 (expression -> ( expression ) .)
    GT              reduce using rule 48 (expression -> ( expression ) .)
    LT              reduce using rule 48 (expression -> ( expression ) .)
    %               reduce using rule 48 (expression -> ( expression ) .)
    /               reduce using rule 48 (expression -> ( expression ) .)
    *               reduce using rule 48 (expression -> ( expression ) .)
    -               reduce using rule 48 (expression -> ( expression ) .)
    +               reduce using rule 48 (expression -> ( expression ) .)
    {               reduce using rule 48 (expression -> ( expression ) .)
    =               reduce using rule 48 (expression -> ( expression ) .)
    )               reduce using rule 48 (expression -> ( expression ) .)
    ,               reduce using rule 48 (expression -> ( expression ) .)


state 97

    (38) while_stmt -> WHILE expression { statement_list . }
    (3) statement_list -> statement_list . statement
    (4) statement -> . PRINT ( expression ) ;
    (5) statement -> . PRINT expression ;
    (6) statement -> . RETURN expression ;
    (7) statement -> . CONTINUE ;
    (8) statement -> . BREAK ;
    (9) statement -> . while_stmt
    (10) statement -> . if_stmt
    (11) statement -> . funcdecl
    (12) statement -> . assignment
    (13) statement -> . vardecl
    (38) while_stmt -> . WHILE expression { statement_list }
    (36) if_stmt -> . IF expression { statement_list }
    (37) if_stmt -> . IF expression { statement_list } ELSE { statement_list }
    (21) funcdecl -> . opt_import FUNC ID ( parameters_opt ) type_opt { statement_list }
    (22) funcdecl -> . FUNC ID ( parameters_opt ) type_opt { statement_list }
    (20) assignment -> . location = expression ;
    (14) vardecl -> . CONST ID type opt_init ;
    (15) vardecl -> . VAR ID opt_type opt_init ;
    (23) opt_import -> .
    (24) opt_import -> . IMPORT
    (39) location -> . ` expression
    (40) location -> . ID
  ! shift/reduce conflict for FUNC resolved as shift
    }               shift and go to state 115
    PRINT           shift and go to state 4
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    WHILE           shift and go to state 13
    IF              shift and go to state 14
    FUNC            shift and go to state 16
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    IMPORT          shift and go to state 21
    `               shift and go to state 22
    ID              shift and go to state 17

    statement                      shift and go to state 23
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    opt_import                     shift and go to state 15
    location                       shift and go to state 18

state 98

    (36) if_stmt -> IF expression { statement_list . }
    (37) if_stmt -> IF expression { statement_list . } ELSE { statement_list }
    (3) statement_list -> statement_list . statement
    (4) statement -> . PRINT ( expression ) ;
    (5) statement -> . PRINT expression ;
    (6) statement -> . RETURN expression ;
    (7) statement -> . CONTINUE ;
    (8) statement -> . BREAK ;
    (9) statement -> . while_stmt
    (10) statement -> . if_stmt
    (11) statement -> . funcdecl
    (12) statement -> . assignment
    (13) statement -> . vardecl
    (38) while_stmt -> . WHILE expression { statement_list }
    (36) if_stmt -> . IF expression { statement_list }
    (37) if_stmt -> . IF expression { statement_list } ELSE { statement_list }
    (21) funcdecl -> . opt_import FUNC ID ( parameters_opt ) type_opt { statement_list }
    (22) funcdecl -> . FUNC ID ( parameters_opt ) type_opt { statement_list }
    (20) assignment -> . location = expression ;
    (14) vardecl -> . CONST ID type opt_init ;
    (15) vardecl -> . VAR ID opt_type opt_init ;
    (23) opt_import -> .
    (24) opt_import -> . IMPORT
    (39) location -> . ` expression
    (40) location -> . ID
  ! shift/reduce conflict for FUNC resolved as shift
    }               shift and go to state 116
    PRINT           shift and go to state 4
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    WHILE           shift and go to state 13
    IF              shift and go to state 14
    FUNC            shift and go to state 16
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    IMPORT          shift and go to state 21
    `               shift and go to state 22
    ID              shift and go to state 17

    statement                      shift and go to state 23
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    opt_import                     shift and go to state 15
    location                       shift and go to state 18

state 99

    (21) funcdecl -> opt_import FUNC ID ( . parameters_opt ) type_opt { statement_list }
    (25) parameters_opt -> .
    (26) parameters_opt -> . parameters
    (29) parameters -> . parameters , param
    (30) parameters -> . param
    (31) param -> . ID type
    )               reduce using rule 25 (parameters_opt -> .)
    ID              shift and go to state 100

    parameters_opt                 shift and go to state 117
    parameters                     shift and go to state 102
    param                          shift and go to state 103

state 100

    (31) param -> ID . type
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    type                           shift and go to state 118

state 101

    (22) funcdecl -> FUNC ID ( parameters_opt . ) type_opt { statement_list }
    )               shift and go to state 119


state 102

    (26) parameters_opt -> parameters .
    (29) parameters -> parameters . , param
    )               reduce using rule 26 (parameters_opt -> parameters .)
    ,               shift and go to state 120


state 103

    (30) parameters -> param .
    ,               reduce using rule 30 (parameters -> param .)
    )               reduce using rule 30 (parameters -> param .)


state 104

    (20) assignment -> location = expression ; .
    PRINT           reduce using rule 20 (assignment -> location = expression ; .)
    RETURN          reduce using rule 20 (assignment -> location = expression ; .)
    CONTINUE        reduce using rule 20 (assignment -> location = expression ; .)
    BREAK           reduce using rule 20 (assignment -> location = expression ; .)
    WHILE           reduce using rule 20 (assignment -> location = expression ; .)
    IF              reduce using rule 20 (assignment -> location = expression ; .)
    FUNC            reduce using rule 20 (assignment -> location = expression ; .)
    CONST           reduce using rule 20 (assignment -> location = expression ; .)
    VAR             reduce using rule 20 (assignment -> location = expression ; .)
    IMPORT          reduce using rule 20 (assignment -> location = expression ; .)
    `               reduce using rule 20 (assignment -> location = expression ; .)
    ID              reduce using rule 20 (assignment -> location = expression ; .)
    $end            reduce using rule 20 (assignment -> location = expression ; .)
    }               reduce using rule 20 (assignment -> location = expression ; .)


state 105

    (14) vardecl -> CONST ID type opt_init . ;
    ;               shift and go to state 121


state 106

    (17) opt_init -> = . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 122
    location                       shift and go to state 30
    type                           shift and go to state 32

state 107

    (15) vardecl -> VAR ID opt_type opt_init . ;
    ;               shift and go to state 123


state 108

    (4) statement -> PRINT ( expression ) ; .
    PRINT           reduce using rule 4 (statement -> PRINT ( expression ) ; .)
    RETURN          reduce using rule 4 (statement -> PRINT ( expression ) ; .)
    CONTINUE        reduce using rule 4 (statement -> PRINT ( expression ) ; .)
    BREAK           reduce using rule 4 (statement -> PRINT ( expression ) ; .)
    WHILE           reduce using rule 4 (statement -> PRINT ( expression ) ; .)
    IF              reduce using rule 4 (statement -> PRINT ( expression ) ; .)
    FUNC            reduce using rule 4 (statement -> PRINT ( expression ) ; .)
    CONST           reduce using rule 4 (statement -> PRINT ( expression ) ; .)
    VAR             reduce using rule 4 (statement -> PRINT ( expression ) ; .)
    IMPORT          reduce using rule 4 (statement -> PRINT ( expression ) ; .)
    `               reduce using rule 4 (statement -> PRINT ( expression ) ; .)
    ID              reduce using rule 4 (statement -> PRINT ( expression ) ; .)
    $end            reduce using rule 4 (statement -> PRINT ( expression ) ; .)
    }               reduce using rule 4 (statement -> PRINT ( expression ) ; .)


state 109

    (46) expression -> ID ( arguments_opt ) .
    ;               reduce using rule 46 (expression -> ID ( arguments_opt ) .)
    LOR             reduce using rule 46 (expression -> ID ( arguments_opt ) .)
    LAND            reduce using rule 46 (expression -> ID ( arguments_opt ) .)
    NE              reduce using rule 46 (expression -> ID ( arguments_opt ) .)
    EQ              reduce using rule 46 (expression -> ID ( arguments_opt ) .)
    GE              reduce using rule 46 (expression -> ID ( arguments_opt ) .)
    LE              reduce using rule 46 (expression -> ID ( arguments_opt ) .)
    GT              reduce using rule 46 (expression -> ID ( arguments_opt ) .)
    LT              reduce using rule 46 (expression -> ID ( arguments_opt ) .)
    %               reduce using rule 46 (expression -> ID ( arguments_opt ) .)
    /               reduce using rule 46 (expression -> ID ( arguments_opt ) .)
    *               reduce using rule 46 (expression -> ID ( arguments_opt ) .)
    -               reduce using rule 46 (expression -> ID ( arguments_opt ) .)
    +               reduce using rule 46 (expression -> ID ( arguments_opt ) .)
    {               reduce using rule 46 (expression -> ID ( arguments_opt ) .)
    =               reduce using rule 46 (expression -> ID ( arguments_opt ) .)
    )               reduce using rule 46 (expression -> ID ( arguments_opt ) .)
    ,               reduce using rule 46 (expression -> ID ( arguments_opt ) .)


state 110

    (63) arguments -> expression _1_222c22_expression_repeat .
    )               reduce using rule 63 (arguments -> expression _1_222c22_expression_repeat .)


state 111

    (64) _1_222c22_expression_repeat -> _1_222c22_expression_items .
    (66) _1_222c22_expression_items -> _1_222c22_expression_items . _1_222c22_expression_item
    (68) _1_222c22_expression_item -> . , expression
    )               reduce using rule 64 (_1_222c22_expression_repeat -> _1_222c22_expression_items .)
    ,               shift and go to state 113

    _1_222c22_expression_item      shift and go to state 124

state 112

    (67) _1_222c22_expression_items -> _1_222c22_expression_item .
    ,               reduce using rule 67 (_1_222c22_expression_items -> _1_222c22_expression_item .)
    )               reduce using rule 67 (_1_222c22_expression_items -> _1_222c22_expression_item .)


state 113

    (68) _1_222c22_expression_item -> , . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . location
    (46) expression -> . ID ( arguments_opt )
    (47) expression -> . type ( expression )
    (48) expression -> . ( expression )
    (49) expression -> . expression LOR expression
    (50) expression -> . expression LAND expression
    (51) expression -> . expression NE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . - expression
    (58) expression -> . expression % expression
    (59) expression -> . expression / expression
    (60) expression -> . expression * expression
    (61) expression -> . expression - expression
    (62) expression -> . expression + expression
    (39) location -> . ` expression
    (40) location -> . ID
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    BOOL            shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    ID              shift and go to state 31
    (               shift and go to state 39
    -               shift and go to state 33
    `               shift and go to state 22
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    expression                     shift and go to state 125
    location                       shift and go to state 30
    type                           shift and go to state 32

state 114

    (47) expression -> type ( expression ) .
    ;               reduce using rule 47 (expression -> type ( expression ) .)
    LOR             reduce using rule 47 (expression -> type ( expression ) .)
    LAND            reduce using rule 47 (expression -> type ( expression ) .)
    NE              reduce using rule 47 (expression -> type ( expression ) .)
    EQ              reduce using rule 47 (expression -> type ( expression ) .)
    GE              reduce using rule 47 (expression -> type ( expression ) .)
    LE              reduce using rule 47 (expression -> type ( expression ) .)
    GT              reduce using rule 47 (expression -> type ( expression ) .)
    LT              reduce using rule 47 (expression -> type ( expression ) .)
    %               reduce using rule 47 (expression -> type ( expression ) .)
    /               reduce using rule 47 (expression -> type ( expression ) .)
    *               reduce using rule 47 (expression -> type ( expression ) .)
    -               reduce using rule 47 (expression -> type ( expression ) .)
    +               reduce using rule 47 (expression -> type ( expression ) .)
    {               reduce using rule 47 (expression -> type ( expression ) .)
    =               reduce using rule 47 (expression -> type ( expression ) .)
    )               reduce using rule 47 (expression -> type ( expression ) .)
    ,               reduce using rule 47 (expression -> type ( expression ) .)


state 115

    (38) while_stmt -> WHILE expression { statement_list } .
    PRINT           reduce using rule 38 (while_stmt -> WHILE expression { statement_list } .)
    RETURN          reduce using rule 38 (while_stmt -> WHILE expression { statement_list } .)
    CONTINUE        reduce using rule 38 (while_stmt -> WHILE expression { statement_list } .)
    BREAK           reduce using rule 38 (while_stmt -> WHILE expression { statement_list } .)
    WHILE           reduce using rule 38 (while_stmt -> WHILE expression { statement_list } .)
    IF              reduce using rule 38 (while_stmt -> WHILE expression { statement_list } .)
    FUNC            reduce using rule 38 (while_stmt -> WHILE expression { statement_list } .)
    CONST           reduce using rule 38 (while_stmt -> WHILE expression { statement_list } .)
    VAR             reduce using rule 38 (while_stmt -> WHILE expression { statement_list } .)
    IMPORT          reduce using rule 38 (while_stmt -> WHILE expression { statement_list } .)
    `               reduce using rule 38 (while_stmt -> WHILE expression { statement_list } .)
    ID              reduce using rule 38 (while_stmt -> WHILE expression { statement_list } .)
    $end            reduce using rule 38 (while_stmt -> WHILE expression { statement_list } .)
    }               reduce using rule 38 (while_stmt -> WHILE expression { statement_list } .)


state 116

    (36) if_stmt -> IF expression { statement_list } .
    (37) if_stmt -> IF expression { statement_list } . ELSE { statement_list }
    PRINT           reduce using rule 36 (if_stmt -> IF expression { statement_list } .)
    RETURN          reduce using rule 36 (if_stmt -> IF expression { statement_list } .)
    CONTINUE        reduce using rule 36 (if_stmt -> IF expression { statement_list } .)
    BREAK           reduce using rule 36 (if_stmt -> IF expression { statement_list } .)
    WHILE           reduce using rule 36 (if_stmt -> IF expression { statement_list } .)
    IF              reduce using rule 36 (if_stmt -> IF expression { statement_list } .)
    FUNC            reduce using rule 36 (if_stmt -> IF expression { statement_list } .)
    CONST           reduce using rule 36 (if_stmt -> IF expression { statement_list } .)
    VAR             reduce using rule 36 (if_stmt -> IF expression { statement_list } .)
    IMPORT          reduce using rule 36 (if_stmt -> IF expression { statement_list } .)
    `               reduce using rule 36 (if_stmt -> IF expression { statement_list } .)
    ID              reduce using rule 36 (if_stmt -> IF expression { statement_list } .)
    $end            reduce using rule 36 (if_stmt -> IF expression { statement_list } .)
    }               reduce using rule 36 (if_stmt -> IF expression { statement_list } .)
    ELSE            shift and go to state 126


state 117

    (21) funcdecl -> opt_import FUNC ID ( parameters_opt . ) type_opt { statement_list }
    )               shift and go to state 127


state 118

    (31) param -> ID type .
    ,               reduce using rule 31 (param -> ID type .)
    )               reduce using rule 31 (param -> ID type .)


state 119

    (22) funcdecl -> FUNC ID ( parameters_opt ) . type_opt { statement_list }
    (27) type_opt -> .
    (28) type_opt -> . type
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    {               reduce using rule 27 (type_opt -> .)
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    type_opt                       shift and go to state 128
    type                           shift and go to state 129

state 120

    (29) parameters -> parameters , . param
    (31) param -> . ID type
    ID              shift and go to state 100

    param                          shift and go to state 130

state 121

    (14) vardecl -> CONST ID type opt_init ; .
    PRINT           reduce using rule 14 (vardecl -> CONST ID type opt_init ; .)
    RETURN          reduce using rule 14 (vardecl -> CONST ID type opt_init ; .)
    CONTINUE        reduce using rule 14 (vardecl -> CONST ID type opt_init ; .)
    BREAK           reduce using rule 14 (vardecl -> CONST ID type opt_init ; .)
    WHILE           reduce using rule 14 (vardecl -> CONST ID type opt_init ; .)
    IF              reduce using rule 14 (vardecl -> CONST ID type opt_init ; .)
    FUNC            reduce using rule 14 (vardecl -> CONST ID type opt_init ; .)
    CONST           reduce using rule 14 (vardecl -> CONST ID type opt_init ; .)
    VAR             reduce using rule 14 (vardecl -> CONST ID type opt_init ; .)
    IMPORT          reduce using rule 14 (vardecl -> CONST ID type opt_init ; .)
    `               reduce using rule 14 (vardecl -> CONST ID type opt_init ; .)
    ID              reduce using rule 14 (vardecl -> CONST ID type opt_init ; .)
    $end            reduce using rule 14 (vardecl -> CONST ID type opt_init ; .)
    }               reduce using rule 14 (vardecl -> CONST ID type opt_init ; .)


state 122

    (17) opt_init -> = expression .
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    ;               reduce using rule 17 (opt_init -> = expression .)
    LOR             shift and go to state 52
    LAND            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62
    -               shift and go to state 63
    +               shift and go to state 64


state 123

    (15) vardecl -> VAR ID opt_type opt_init ; .
    PRINT           reduce using rule 15 (vardecl -> VAR ID opt_type opt_init ; .)
    RETURN          reduce using rule 15 (vardecl -> VAR ID opt_type opt_init ; .)
    CONTINUE        reduce using rule 15 (vardecl -> VAR ID opt_type opt_init ; .)
    BREAK           reduce using rule 15 (vardecl -> VAR ID opt_type opt_init ; .)
    WHILE           reduce using rule 15 (vardecl -> VAR ID opt_type opt_init ; .)
    IF              reduce using rule 15 (vardecl -> VAR ID opt_type opt_init ; .)
    FUNC            reduce using rule 15 (vardecl -> VAR ID opt_type opt_init ; .)
    CONST           reduce using rule 15 (vardecl -> VAR ID opt_type opt_init ; .)
    VAR             reduce using rule 15 (vardecl -> VAR ID opt_type opt_init ; .)
    IMPORT          reduce using rule 15 (vardecl -> VAR ID opt_type opt_init ; .)
    `               reduce using rule 15 (vardecl -> VAR ID opt_type opt_init ; .)
    ID              reduce using rule 15 (vardecl -> VAR ID opt_type opt_init ; .)
    $end            reduce using rule 15 (vardecl -> VAR ID opt_type opt_init ; .)
    }               reduce using rule 15 (vardecl -> VAR ID opt_type opt_init ; .)


state 124

    (66) _1_222c22_expression_items -> _1_222c22_expression_items _1_222c22_expression_item .
    ,               reduce using rule 66 (_1_222c22_expression_items -> _1_222c22_expression_items _1_222c22_expression_item .)
    )               reduce using rule 66 (_1_222c22_expression_items -> _1_222c22_expression_items _1_222c22_expression_item .)


state 125

    (68) _1_222c22_expression_item -> , expression .
    (49) expression -> expression . LOR expression
    (50) expression -> expression . LAND expression
    (51) expression -> expression . NE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (58) expression -> expression . % expression
    (59) expression -> expression . / expression
    (60) expression -> expression . * expression
    (61) expression -> expression . - expression
    (62) expression -> expression . + expression
    ,               reduce using rule 68 (_1_222c22_expression_item -> , expression .)
    )               reduce using rule 68 (_1_222c22_expression_item -> , expression .)
    LOR             shift and go to state 52
    LAND            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    %               shift and go to state 60
    /               shift and go to state 61
    *               shift and go to state 62
    -               shift and go to state 63
    +               shift and go to state 64


state 126

    (37) if_stmt -> IF expression { statement_list } ELSE . { statement_list }
    {               shift and go to state 131


state 127

    (21) funcdecl -> opt_import FUNC ID ( parameters_opt ) . type_opt { statement_list }
    (27) type_opt -> .
    (28) type_opt -> . type
    (32) type -> . BOOL_TYPE
    (33) type -> . CHAR_TYPE
    (34) type -> . FLOAT_TYPE
    (35) type -> . INT_TYPE
    {               reduce using rule 27 (type_opt -> .)
    BOOL_TYPE       shift and go to state 34
    CHAR_TYPE       shift and go to state 35
    FLOAT_TYPE      shift and go to state 36
    INT_TYPE        shift and go to state 37

    type_opt                       shift and go to state 132
    type                           shift and go to state 129

state 128

    (22) funcdecl -> FUNC ID ( parameters_opt ) type_opt . { statement_list }
    {               shift and go to state 133


state 129

    (28) type_opt -> type .
    {               reduce using rule 28 (type_opt -> type .)


state 130

    (29) parameters -> parameters , param .
    ,               reduce using rule 29 (parameters -> parameters , param .)
    )               reduce using rule 29 (parameters -> parameters , param .)


state 131

    (37) if_stmt -> IF expression { statement_list } ELSE { . statement_list }
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . PRINT ( expression ) ;
    (5) statement -> . PRINT expression ;
    (6) statement -> . RETURN expression ;
    (7) statement -> . CONTINUE ;
    (8) statement -> . BREAK ;
    (9) statement -> . while_stmt
    (10) statement -> . if_stmt
    (11) statement -> . funcdecl
    (12) statement -> . assignment
    (13) statement -> . vardecl
    (38) while_stmt -> . WHILE expression { statement_list }
    (36) if_stmt -> . IF expression { statement_list }
    (37) if_stmt -> . IF expression { statement_list } ELSE { statement_list }
    (21) funcdecl -> . opt_import FUNC ID ( parameters_opt ) type_opt { statement_list }
    (22) funcdecl -> . FUNC ID ( parameters_opt ) type_opt { statement_list }
    (20) assignment -> . location = expression ;
    (14) vardecl -> . CONST ID type opt_init ;
    (15) vardecl -> . VAR ID opt_type opt_init ;
    (23) opt_import -> .
    (24) opt_import -> . IMPORT
    (39) location -> . ` expression
    (40) location -> . ID
  ! shift/reduce conflict for FUNC resolved as shift
    PRINT           shift and go to state 4
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    WHILE           shift and go to state 13
    IF              shift and go to state 14
    FUNC            shift and go to state 16
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    IMPORT          shift and go to state 21
    `               shift and go to state 22
    ID              shift and go to state 17

    statement_list                 shift and go to state 134
    statement                      shift and go to state 3
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    opt_import                     shift and go to state 15
    location                       shift and go to state 18

state 132

    (21) funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt . { statement_list }
    {               shift and go to state 135


state 133

    (22) funcdecl -> FUNC ID ( parameters_opt ) type_opt { . statement_list }
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . PRINT ( expression ) ;
    (5) statement -> . PRINT expression ;
    (6) statement -> . RETURN expression ;
    (7) statement -> . CONTINUE ;
    (8) statement -> . BREAK ;
    (9) statement -> . while_stmt
    (10) statement -> . if_stmt
    (11) statement -> . funcdecl
    (12) statement -> . assignment
    (13) statement -> . vardecl
    (38) while_stmt -> . WHILE expression { statement_list }
    (36) if_stmt -> . IF expression { statement_list }
    (37) if_stmt -> . IF expression { statement_list } ELSE { statement_list }
    (21) funcdecl -> . opt_import FUNC ID ( parameters_opt ) type_opt { statement_list }
    (22) funcdecl -> . FUNC ID ( parameters_opt ) type_opt { statement_list }
    (20) assignment -> . location = expression ;
    (14) vardecl -> . CONST ID type opt_init ;
    (15) vardecl -> . VAR ID opt_type opt_init ;
    (23) opt_import -> .
    (24) opt_import -> . IMPORT
    (39) location -> . ` expression
    (40) location -> . ID
  ! shift/reduce conflict for FUNC resolved as shift
    PRINT           shift and go to state 4
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    WHILE           shift and go to state 13
    IF              shift and go to state 14
    FUNC            shift and go to state 16
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    IMPORT          shift and go to state 21
    `               shift and go to state 22
    ID              shift and go to state 17

    statement_list                 shift and go to state 136
    statement                      shift and go to state 3
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    opt_import                     shift and go to state 15
    location                       shift and go to state 18

state 134

    (37) if_stmt -> IF expression { statement_list } ELSE { statement_list . }
    (3) statement_list -> statement_list . statement
    (4) statement -> . PRINT ( expression ) ;
    (5) statement -> . PRINT expression ;
    (6) statement -> . RETURN expression ;
    (7) statement -> . CONTINUE ;
    (8) statement -> . BREAK ;
    (9) statement -> . while_stmt
    (10) statement -> . if_stmt
    (11) statement -> . funcdecl
    (12) statement -> . assignment
    (13) statement -> . vardecl
    (38) while_stmt -> . WHILE expression { statement_list }
    (36) if_stmt -> . IF expression { statement_list }
    (37) if_stmt -> . IF expression { statement_list } ELSE { statement_list }
    (21) funcdecl -> . opt_import FUNC ID ( parameters_opt ) type_opt { statement_list }
    (22) funcdecl -> . FUNC ID ( parameters_opt ) type_opt { statement_list }
    (20) assignment -> . location = expression ;
    (14) vardecl -> . CONST ID type opt_init ;
    (15) vardecl -> . VAR ID opt_type opt_init ;
    (23) opt_import -> .
    (24) opt_import -> . IMPORT
    (39) location -> . ` expression
    (40) location -> . ID
  ! shift/reduce conflict for FUNC resolved as shift
    }               shift and go to state 137
    PRINT           shift and go to state 4
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    WHILE           shift and go to state 13
    IF              shift and go to state 14
    FUNC            shift and go to state 16
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    IMPORT          shift and go to state 21
    `               shift and go to state 22
    ID              shift and go to state 17

    statement                      shift and go to state 23
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    opt_import                     shift and go to state 15
    location                       shift and go to state 18

state 135

    (21) funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { . statement_list }
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . PRINT ( expression ) ;
    (5) statement -> . PRINT expression ;
    (6) statement -> . RETURN expression ;
    (7) statement -> . CONTINUE ;
    (8) statement -> . BREAK ;
    (9) statement -> . while_stmt
    (10) statement -> . if_stmt
    (11) statement -> . funcdecl
    (12) statement -> . assignment
    (13) statement -> . vardecl
    (38) while_stmt -> . WHILE expression { statement_list }
    (36) if_stmt -> . IF expression { statement_list }
    (37) if_stmt -> . IF expression { statement_list } ELSE { statement_list }
    (21) funcdecl -> . opt_import FUNC ID ( parameters_opt ) type_opt { statement_list }
    (22) funcdecl -> . FUNC ID ( parameters_opt ) type_opt { statement_list }
    (20) assignment -> . location = expression ;
    (14) vardecl -> . CONST ID type opt_init ;
    (15) vardecl -> . VAR ID opt_type opt_init ;
    (23) opt_import -> .
    (24) opt_import -> . IMPORT
    (39) location -> . ` expression
    (40) location -> . ID
  ! shift/reduce conflict for FUNC resolved as shift
    PRINT           shift and go to state 4
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    WHILE           shift and go to state 13
    IF              shift and go to state 14
    FUNC            shift and go to state 16
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    IMPORT          shift and go to state 21
    `               shift and go to state 22
    ID              shift and go to state 17

    opt_import                     shift and go to state 15
    statement_list                 shift and go to state 138
    statement                      shift and go to state 3
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    location                       shift and go to state 18

state 136

    (22) funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list . }
    (3) statement_list -> statement_list . statement
    (4) statement -> . PRINT ( expression ) ;
    (5) statement -> . PRINT expression ;
    (6) statement -> . RETURN expression ;
    (7) statement -> . CONTINUE ;
    (8) statement -> . BREAK ;
    (9) statement -> . while_stmt
    (10) statement -> . if_stmt
    (11) statement -> . funcdecl
    (12) statement -> . assignment
    (13) statement -> . vardecl
    (38) while_stmt -> . WHILE expression { statement_list }
    (36) if_stmt -> . IF expression { statement_list }
    (37) if_stmt -> . IF expression { statement_list } ELSE { statement_list }
    (21) funcdecl -> . opt_import FUNC ID ( parameters_opt ) type_opt { statement_list }
    (22) funcdecl -> . FUNC ID ( parameters_opt ) type_opt { statement_list }
    (20) assignment -> . location = expression ;
    (14) vardecl -> . CONST ID type opt_init ;
    (15) vardecl -> . VAR ID opt_type opt_init ;
    (23) opt_import -> .
    (24) opt_import -> . IMPORT
    (39) location -> . ` expression
    (40) location -> . ID
  ! shift/reduce conflict for FUNC resolved as shift
    }               shift and go to state 139
    PRINT           shift and go to state 4
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    WHILE           shift and go to state 13
    IF              shift and go to state 14
    FUNC            shift and go to state 16
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    IMPORT          shift and go to state 21
    `               shift and go to state 22
    ID              shift and go to state 17

    statement                      shift and go to state 23
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    opt_import                     shift and go to state 15
    location                       shift and go to state 18

state 137

    (37) if_stmt -> IF expression { statement_list } ELSE { statement_list } .
    PRINT           reduce using rule 37 (if_stmt -> IF expression { statement_list } ELSE { statement_list } .)
    RETURN          reduce using rule 37 (if_stmt -> IF expression { statement_list } ELSE { statement_list } .)
    CONTINUE        reduce using rule 37 (if_stmt -> IF expression { statement_list } ELSE { statement_list } .)
    BREAK           reduce using rule 37 (if_stmt -> IF expression { statement_list } ELSE { statement_list } .)
    WHILE           reduce using rule 37 (if_stmt -> IF expression { statement_list } ELSE { statement_list } .)
    IF              reduce using rule 37 (if_stmt -> IF expression { statement_list } ELSE { statement_list } .)
    FUNC            reduce using rule 37 (if_stmt -> IF expression { statement_list } ELSE { statement_list } .)
    CONST           reduce using rule 37 (if_stmt -> IF expression { statement_list } ELSE { statement_list } .)
    VAR             reduce using rule 37 (if_stmt -> IF expression { statement_list } ELSE { statement_list } .)
    IMPORT          reduce using rule 37 (if_stmt -> IF expression { statement_list } ELSE { statement_list } .)
    `               reduce using rule 37 (if_stmt -> IF expression { statement_list } ELSE { statement_list } .)
    ID              reduce using rule 37 (if_stmt -> IF expression { statement_list } ELSE { statement_list } .)
    $end            reduce using rule 37 (if_stmt -> IF expression { statement_list } ELSE { statement_list } .)
    }               reduce using rule 37 (if_stmt -> IF expression { statement_list } ELSE { statement_list } .)


state 138

    (21) funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list . }
    (3) statement_list -> statement_list . statement
    (4) statement -> . PRINT ( expression ) ;
    (5) statement -> . PRINT expression ;
    (6) statement -> . RETURN expression ;
    (7) statement -> . CONTINUE ;
    (8) statement -> . BREAK ;
    (9) statement -> . while_stmt
    (10) statement -> . if_stmt
    (11) statement -> . funcdecl
    (12) statement -> . assignment
    (13) statement -> . vardecl
    (38) while_stmt -> . WHILE expression { statement_list }
    (36) if_stmt -> . IF expression { statement_list }
    (37) if_stmt -> . IF expression { statement_list } ELSE { statement_list }
    (21) funcdecl -> . opt_import FUNC ID ( parameters_opt ) type_opt { statement_list }
    (22) funcdecl -> . FUNC ID ( parameters_opt ) type_opt { statement_list }
    (20) assignment -> . location = expression ;
    (14) vardecl -> . CONST ID type opt_init ;
    (15) vardecl -> . VAR ID opt_type opt_init ;
    (23) opt_import -> .
    (24) opt_import -> . IMPORT
    (39) location -> . ` expression
    (40) location -> . ID
  ! shift/reduce conflict for FUNC resolved as shift
    }               shift and go to state 140
    PRINT           shift and go to state 4
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    WHILE           shift and go to state 13
    IF              shift and go to state 14
    FUNC            shift and go to state 16
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    IMPORT          shift and go to state 21
    `               shift and go to state 22
    ID              shift and go to state 17

    opt_import                     shift and go to state 15
    statement                      shift and go to state 23
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    location                       shift and go to state 18

state 139

    (22) funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .
    PRINT           reduce using rule 22 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    RETURN          reduce using rule 22 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    CONTINUE        reduce using rule 22 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    BREAK           reduce using rule 22 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    WHILE           reduce using rule 22 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    IF              reduce using rule 22 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    FUNC            reduce using rule 22 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    CONST           reduce using rule 22 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    VAR             reduce using rule 22 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    IMPORT          reduce using rule 22 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    `               reduce using rule 22 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    ID              reduce using rule 22 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    $end            reduce using rule 22 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    }               reduce using rule 22 (funcdecl -> FUNC ID ( parameters_opt ) type_opt { statement_list } .)


state 140

    (21) funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .
    PRINT           reduce using rule 21 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    RETURN          reduce using rule 21 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    CONTINUE        reduce using rule 21 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    BREAK           reduce using rule 21 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    WHILE           reduce using rule 21 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    IF              reduce using rule 21 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    FUNC            reduce using rule 21 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    CONST           reduce using rule 21 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    VAR             reduce using rule 21 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    IMPORT          reduce using rule 21 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    `               reduce using rule 21 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    ID              reduce using rule 21 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    $end            reduce using rule 21 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    }               reduce using rule 21 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)


Conflicts:

shift/reduce conflict for FUNC in state 0 resolved as shift
shift/reduce conflict for FUNC in state 2 resolved as shift
shift/reduce conflict for LOR in state 49 resolved as shift
shift/reduce conflict for LAND in state 49 resolved as shift
shift/reduce conflict for NE in state 49 resolved as shift
shift/reduce conflict for EQ in state 49 resolved as shift
shift/reduce conflict for GE in state 49 resolved as shift
shift/reduce conflict for LE in state 49 resolved as shift
shift/reduce conflict for GT in state 49 resolved as shift
shift/reduce conflict for LT in state 49 resolved as shift
shift/reduce conflict for % in state 49 resolved as shift
shift/reduce conflict for / in state 49 resolved as shift
shift/reduce conflict for * in state 49 resolved as shift
shift/reduce conflict for - in state 49 resolved as shift
shift/reduce conflict for + in state 49 resolved as shift
shift/reduce conflict for FUNC in state 70 resolved as shift
shift/reduce conflict for FUNC in state 71 resolved as shift
shift/reduce conflict for ; in state 78 resolved as shift
shift/reduce conflict for FUNC in state 97 resolved as shift
shift/reduce conflict for FUNC in state 98 resolved as shift
shift/reduce conflict for FUNC in state 131 resolved as shift
shift/reduce conflict for FUNC in state 133 resolved as shift
shift/reduce conflict for FUNC in state 134 resolved as shift
shift/reduce conflict for FUNC in state 135 resolved as shift
shift/reduce conflict for FUNC in state 136 resolved as shift
shift/reduce conflict for FUNC in state 138 resolved as shift