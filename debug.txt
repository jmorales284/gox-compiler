Grammar:

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> print_stmt
Rule 5     statement -> RETURN expression ;
Rule 6     statement -> CONTINUE ;
Rule 7     statement -> BREAK ;
Rule 8     statement -> while_stmt
Rule 9     statement -> if_stmt
Rule 10    statement -> funcdecl
Rule 11    statement -> assignment
Rule 12    statement -> vardecl
Rule 13    vardecl -> CONST ID type opt_init ;
Rule 14    vardecl -> VAR ID opt_type opt_init ;
Rule 15    opt_init -> <empty>
Rule 16    opt_init -> = expression  [precedence=right, level=1]
Rule 17    opt_type -> <empty>
Rule 18    opt_type -> type
Rule 19    assignment -> location = expression ;
Rule 20    funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list }
Rule 21    opt_import -> <empty>
Rule 22    opt_import -> IMPORT
Rule 23    parameters_opt -> <empty>
Rule 24    parameters_opt -> parameters
Rule 25    type_opt -> <empty>
Rule 26    type_opt -> type
Rule 27    parameters -> parameters , param
Rule 28    parameters -> param
Rule 29    param -> ID type
Rule 30    type -> BOOL_TYPE
Rule 31    type -> CHAR_TYPE
Rule 32    type -> FLOAT_TYPE
Rule 33    type -> INT_TYPE
Rule 34    block -> { statement_list }
Rule 35    if_stmt -> IF expression block ELSE block
Rule 36    if_stmt -> IF expression block
Rule 37    while_stmt -> WHILE expression block
Rule 38    print_stmt -> PRINT expression ;
Rule 39    location -> BACKTICK primary  [precedence=right, level=8]
Rule 40    location -> ID
Rule 41    expression -> BOOL
Rule 42    expression -> CHAR
Rule 43    expression -> FLOAT
Rule 44    expression -> INTEGER
Rule 45    expression -> primary
Rule 46    expression -> function_call
Rule 47    expression -> - expression  [precedence=right, level=8]
Rule 48    expression -> expression % expression
Rule 49    expression -> expression / expression  [precedence=left, level=7]
Rule 50    expression -> expression * expression  [precedence=left, level=7]
Rule 51    expression -> expression - expression  [precedence=left, level=6]
Rule 52    expression -> expression + expression  [precedence=left, level=6]
Rule 53    expression -> expression GE expression  [precedence=nonassoc, level=5]
Rule 54    expression -> expression LE expression  [precedence=nonassoc, level=5]
Rule 55    expression -> expression GT expression  [precedence=nonassoc, level=5]
Rule 56    expression -> expression LT expression  [precedence=nonassoc, level=5]
Rule 57    expression -> expression NE expression  [precedence=nonassoc, level=4]
Rule 58    expression -> expression EQ expression  [precedence=nonassoc, level=4]
Rule 59    expression -> expression LAND expression  [precedence=left, level=3]
Rule 60    expression -> expression LOR expression  [precedence=left, level=2]
Rule 61    primary -> location
Rule 62    primary -> ( expression )  [precedence=nonassoc, level=9]
Rule 63    function_call -> ID ( arguments_opt )  [precedence=left, level=10]
Rule 64    arguments_opt -> <empty>
Rule 65    arguments_opt -> arguments
Rule 66    arguments -> arguments , expression
Rule 67    arguments -> expression

Terminals, with rules where they appear:

%                    : 48
(                    : 20 62 63
)                    : 20 62 63
*                    : 50
+                    : 52
,                    : 27 66
-                    : 47 51
/                    : 49
;                    : 5 6 7 13 14 19 38
=                    : 16 19
BACKTICK             : 39
BOOL                 : 41
BOOL_TYPE            : 30
BREAK                : 7
CHAR                 : 42
CHAR_TYPE            : 31
CONST                : 13
CONTINUE             : 6
ELSE                 : 35
EQ                   : 58
FLOAT                : 43
FLOAT_TYPE           : 32
FUNC                 : 20
GE                   : 53
GT                   : 55
ID                   : 13 14 20 29 40 63
IF                   : 35 36
IMPORT               : 22
INTEGER              : 44
INT_TYPE             : 33
LAND                 : 59
LE                   : 54
LOR                  : 60
LT                   : 56
NE                   : 57
PRINT                : 38
RETURN               : 5
VAR                  : 14
WHILE                : 37
error                : 
{                    : 20 34
}                    : 20 34

Nonterminals, with rules where they appear:

arguments            : 65 66
arguments_opt        : 63
assignment           : 11
block                : 35 35 36 37
expression           : 5 16 19 35 36 37 38 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 62 66 67
funcdecl             : 10
function_call        : 46
if_stmt              : 9
location             : 19 61
opt_import           : 20
opt_init             : 13 14
opt_type             : 14
param                : 27 28
parameters           : 24 27
parameters_opt       : 20
primary              : 39 45
print_stmt           : 4
program              : 0
statement            : 2 3
statement_list       : 1 3 20 34
type                 : 13 18 26 29
type_opt             : 20
vardecl              : 12
while_stmt           : 8


state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_stmt
    (5) statement -> . RETURN expression ;
    (6) statement -> . CONTINUE ;
    (7) statement -> . BREAK ;
    (8) statement -> . while_stmt
    (9) statement -> . if_stmt
    (10) statement -> . funcdecl
    (11) statement -> . assignment
    (12) statement -> . vardecl
    (38) print_stmt -> . PRINT expression ;
    (37) while_stmt -> . WHILE expression block
    (35) if_stmt -> . IF expression block ELSE block
    (36) if_stmt -> . IF expression block
    (20) funcdecl -> . opt_import FUNC ID ( parameters_opt ) type_opt { statement_list }
    (19) assignment -> . location = expression ;
    (13) vardecl -> . CONST ID type opt_init ;
    (14) vardecl -> . VAR ID opt_type opt_init ;
    (21) opt_import -> .
    (22) opt_import -> . IMPORT
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    FUNC            reduce using rule 21 (opt_import -> .)
    IMPORT          shift and go to state 21
    BACKTICK        shift and go to state 22
    ID              shift and go to state 17

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    print_stmt                     shift and go to state 4
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    opt_import                     shift and go to state 16
    location                       shift and go to state 18

state 1

    (0) S' -> program .


state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_stmt
    (5) statement -> . RETURN expression ;
    (6) statement -> . CONTINUE ;
    (7) statement -> . BREAK ;
    (8) statement -> . while_stmt
    (9) statement -> . if_stmt
    (10) statement -> . funcdecl
    (11) statement -> . assignment
    (12) statement -> . vardecl
    (38) print_stmt -> . PRINT expression ;
    (37) while_stmt -> . WHILE expression block
    (35) if_stmt -> . IF expression block ELSE block
    (36) if_stmt -> . IF expression block
    (20) funcdecl -> . opt_import FUNC ID ( parameters_opt ) type_opt { statement_list }
    (19) assignment -> . location = expression ;
    (13) vardecl -> . CONST ID type opt_init ;
    (14) vardecl -> . VAR ID opt_type opt_init ;
    (21) opt_import -> .
    (22) opt_import -> . IMPORT
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    $end            reduce using rule 1 (program -> statement_list .)
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    FUNC            reduce using rule 21 (opt_import -> .)
    IMPORT          shift and go to state 21
    BACKTICK        shift and go to state 22
    ID              shift and go to state 17

    statement                      shift and go to state 23
    print_stmt                     shift and go to state 4
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    opt_import                     shift and go to state 16
    location                       shift and go to state 18

state 3

    (2) statement_list -> statement .
    RETURN          reduce using rule 2 (statement_list -> statement .)
    CONTINUE        reduce using rule 2 (statement_list -> statement .)
    BREAK           reduce using rule 2 (statement_list -> statement .)
    PRINT           reduce using rule 2 (statement_list -> statement .)
    WHILE           reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    CONST           reduce using rule 2 (statement_list -> statement .)
    VAR             reduce using rule 2 (statement_list -> statement .)
    IMPORT          reduce using rule 2 (statement_list -> statement .)
    BACKTICK        reduce using rule 2 (statement_list -> statement .)
    ID              reduce using rule 2 (statement_list -> statement .)
    FUNC            reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    }               reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> print_stmt .
    RETURN          reduce using rule 4 (statement -> print_stmt .)
    CONTINUE        reduce using rule 4 (statement -> print_stmt .)
    BREAK           reduce using rule 4 (statement -> print_stmt .)
    PRINT           reduce using rule 4 (statement -> print_stmt .)
    WHILE           reduce using rule 4 (statement -> print_stmt .)
    IF              reduce using rule 4 (statement -> print_stmt .)
    CONST           reduce using rule 4 (statement -> print_stmt .)
    VAR             reduce using rule 4 (statement -> print_stmt .)
    IMPORT          reduce using rule 4 (statement -> print_stmt .)
    BACKTICK        reduce using rule 4 (statement -> print_stmt .)
    ID              reduce using rule 4 (statement -> print_stmt .)
    FUNC            reduce using rule 4 (statement -> print_stmt .)
    $end            reduce using rule 4 (statement -> print_stmt .)
    }               reduce using rule 4 (statement -> print_stmt .)


state 5

    (5) statement -> RETURN . expression ;
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 24
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 6

    (6) statement -> CONTINUE . ;
    ;               shift and go to state 35


state 7

    (7) statement -> BREAK . ;
    ;               shift and go to state 36


state 8

    (8) statement -> while_stmt .
    RETURN          reduce using rule 8 (statement -> while_stmt .)
    CONTINUE        reduce using rule 8 (statement -> while_stmt .)
    BREAK           reduce using rule 8 (statement -> while_stmt .)
    PRINT           reduce using rule 8 (statement -> while_stmt .)
    WHILE           reduce using rule 8 (statement -> while_stmt .)
    IF              reduce using rule 8 (statement -> while_stmt .)
    CONST           reduce using rule 8 (statement -> while_stmt .)
    VAR             reduce using rule 8 (statement -> while_stmt .)
    IMPORT          reduce using rule 8 (statement -> while_stmt .)
    BACKTICK        reduce using rule 8 (statement -> while_stmt .)
    ID              reduce using rule 8 (statement -> while_stmt .)
    FUNC            reduce using rule 8 (statement -> while_stmt .)
    $end            reduce using rule 8 (statement -> while_stmt .)
    }               reduce using rule 8 (statement -> while_stmt .)


state 9

    (9) statement -> if_stmt .
    RETURN          reduce using rule 9 (statement -> if_stmt .)
    CONTINUE        reduce using rule 9 (statement -> if_stmt .)
    BREAK           reduce using rule 9 (statement -> if_stmt .)
    PRINT           reduce using rule 9 (statement -> if_stmt .)
    WHILE           reduce using rule 9 (statement -> if_stmt .)
    IF              reduce using rule 9 (statement -> if_stmt .)
    CONST           reduce using rule 9 (statement -> if_stmt .)
    VAR             reduce using rule 9 (statement -> if_stmt .)
    IMPORT          reduce using rule 9 (statement -> if_stmt .)
    BACKTICK        reduce using rule 9 (statement -> if_stmt .)
    ID              reduce using rule 9 (statement -> if_stmt .)
    FUNC            reduce using rule 9 (statement -> if_stmt .)
    $end            reduce using rule 9 (statement -> if_stmt .)
    }               reduce using rule 9 (statement -> if_stmt .)


state 10

    (10) statement -> funcdecl .
    RETURN          reduce using rule 10 (statement -> funcdecl .)
    CONTINUE        reduce using rule 10 (statement -> funcdecl .)
    BREAK           reduce using rule 10 (statement -> funcdecl .)
    PRINT           reduce using rule 10 (statement -> funcdecl .)
    WHILE           reduce using rule 10 (statement -> funcdecl .)
    IF              reduce using rule 10 (statement -> funcdecl .)
    CONST           reduce using rule 10 (statement -> funcdecl .)
    VAR             reduce using rule 10 (statement -> funcdecl .)
    IMPORT          reduce using rule 10 (statement -> funcdecl .)
    BACKTICK        reduce using rule 10 (statement -> funcdecl .)
    ID              reduce using rule 10 (statement -> funcdecl .)
    FUNC            reduce using rule 10 (statement -> funcdecl .)
    $end            reduce using rule 10 (statement -> funcdecl .)
    }               reduce using rule 10 (statement -> funcdecl .)


state 11

    (11) statement -> assignment .
    RETURN          reduce using rule 11 (statement -> assignment .)
    CONTINUE        reduce using rule 11 (statement -> assignment .)
    BREAK           reduce using rule 11 (statement -> assignment .)
    PRINT           reduce using rule 11 (statement -> assignment .)
    WHILE           reduce using rule 11 (statement -> assignment .)
    IF              reduce using rule 11 (statement -> assignment .)
    CONST           reduce using rule 11 (statement -> assignment .)
    VAR             reduce using rule 11 (statement -> assignment .)
    IMPORT          reduce using rule 11 (statement -> assignment .)
    BACKTICK        reduce using rule 11 (statement -> assignment .)
    ID              reduce using rule 11 (statement -> assignment .)
    FUNC            reduce using rule 11 (statement -> assignment .)
    $end            reduce using rule 11 (statement -> assignment .)
    }               reduce using rule 11 (statement -> assignment .)


state 12

    (12) statement -> vardecl .
    RETURN          reduce using rule 12 (statement -> vardecl .)
    CONTINUE        reduce using rule 12 (statement -> vardecl .)
    BREAK           reduce using rule 12 (statement -> vardecl .)
    PRINT           reduce using rule 12 (statement -> vardecl .)
    WHILE           reduce using rule 12 (statement -> vardecl .)
    IF              reduce using rule 12 (statement -> vardecl .)
    CONST           reduce using rule 12 (statement -> vardecl .)
    VAR             reduce using rule 12 (statement -> vardecl .)
    IMPORT          reduce using rule 12 (statement -> vardecl .)
    BACKTICK        reduce using rule 12 (statement -> vardecl .)
    ID              reduce using rule 12 (statement -> vardecl .)
    FUNC            reduce using rule 12 (statement -> vardecl .)
    $end            reduce using rule 12 (statement -> vardecl .)
    }               reduce using rule 12 (statement -> vardecl .)


state 13

    (38) print_stmt -> PRINT . expression ;
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 37
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 14

    (37) while_stmt -> WHILE . expression block
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 38
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 15

    (35) if_stmt -> IF . expression block ELSE block
    (36) if_stmt -> IF . expression block
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 39
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 16

    (20) funcdecl -> opt_import . FUNC ID ( parameters_opt ) type_opt { statement_list }
    FUNC            shift and go to state 40


state 17

    (40) location -> ID .
    =               reduce using rule 40 (location -> ID .)
    ;               reduce using rule 40 (location -> ID .)
    %               reduce using rule 40 (location -> ID .)
    /               reduce using rule 40 (location -> ID .)
    *               reduce using rule 40 (location -> ID .)
    -               reduce using rule 40 (location -> ID .)
    +               reduce using rule 40 (location -> ID .)
    GE              reduce using rule 40 (location -> ID .)
    LE              reduce using rule 40 (location -> ID .)
    GT              reduce using rule 40 (location -> ID .)
    LT              reduce using rule 40 (location -> ID .)
    NE              reduce using rule 40 (location -> ID .)
    EQ              reduce using rule 40 (location -> ID .)
    LAND            reduce using rule 40 (location -> ID .)
    LOR             reduce using rule 40 (location -> ID .)
    {               reduce using rule 40 (location -> ID .)
    )               reduce using rule 40 (location -> ID .)
    ,               reduce using rule 40 (location -> ID .)


state 18

    (19) assignment -> location . = expression ;
    =               shift and go to state 41


state 19

    (13) vardecl -> CONST . ID type opt_init ;
    ID              shift and go to state 42


state 20

    (14) vardecl -> VAR . ID opt_type opt_init ;
    ID              shift and go to state 43


state 21

    (22) opt_import -> IMPORT .
    FUNC            reduce using rule 22 (opt_import -> IMPORT .)


state 22

    (39) location -> BACKTICK . primary
    (61) primary -> . location
    (62) primary -> . ( expression )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    (               shift and go to state 33
    BACKTICK        shift and go to state 22
    ID              shift and go to state 17

    primary                        shift and go to state 44
    location                       shift and go to state 32

state 23

    (3) statement_list -> statement_list statement .
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 3 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 3 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    CONST           reduce using rule 3 (statement_list -> statement_list statement .)
    VAR             reduce using rule 3 (statement_list -> statement_list statement .)
    IMPORT          reduce using rule 3 (statement_list -> statement_list statement .)
    BACKTICK        reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    FUNC            reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    }               reduce using rule 3 (statement_list -> statement_list statement .)


state 24

    (5) statement -> RETURN expression . ;
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    ;               shift and go to state 45
    %               shift and go to state 46
    /               shift and go to state 47
    *               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50
    GE              shift and go to state 51
    LE              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    LAND            shift and go to state 57
    LOR             shift and go to state 58


state 25

    (41) expression -> BOOL .
    ;               reduce using rule 41 (expression -> BOOL .)
    %               reduce using rule 41 (expression -> BOOL .)
    /               reduce using rule 41 (expression -> BOOL .)
    *               reduce using rule 41 (expression -> BOOL .)
    -               reduce using rule 41 (expression -> BOOL .)
    +               reduce using rule 41 (expression -> BOOL .)
    GE              reduce using rule 41 (expression -> BOOL .)
    LE              reduce using rule 41 (expression -> BOOL .)
    GT              reduce using rule 41 (expression -> BOOL .)
    LT              reduce using rule 41 (expression -> BOOL .)
    NE              reduce using rule 41 (expression -> BOOL .)
    EQ              reduce using rule 41 (expression -> BOOL .)
    LAND            reduce using rule 41 (expression -> BOOL .)
    LOR             reduce using rule 41 (expression -> BOOL .)
    {               reduce using rule 41 (expression -> BOOL .)
    )               reduce using rule 41 (expression -> BOOL .)
    ,               reduce using rule 41 (expression -> BOOL .)


state 26

    (42) expression -> CHAR .
    ;               reduce using rule 42 (expression -> CHAR .)
    %               reduce using rule 42 (expression -> CHAR .)
    /               reduce using rule 42 (expression -> CHAR .)
    *               reduce using rule 42 (expression -> CHAR .)
    -               reduce using rule 42 (expression -> CHAR .)
    +               reduce using rule 42 (expression -> CHAR .)
    GE              reduce using rule 42 (expression -> CHAR .)
    LE              reduce using rule 42 (expression -> CHAR .)
    GT              reduce using rule 42 (expression -> CHAR .)
    LT              reduce using rule 42 (expression -> CHAR .)
    NE              reduce using rule 42 (expression -> CHAR .)
    EQ              reduce using rule 42 (expression -> CHAR .)
    LAND            reduce using rule 42 (expression -> CHAR .)
    LOR             reduce using rule 42 (expression -> CHAR .)
    {               reduce using rule 42 (expression -> CHAR .)
    )               reduce using rule 42 (expression -> CHAR .)
    ,               reduce using rule 42 (expression -> CHAR .)


state 27

    (43) expression -> FLOAT .
    ;               reduce using rule 43 (expression -> FLOAT .)
    %               reduce using rule 43 (expression -> FLOAT .)
    /               reduce using rule 43 (expression -> FLOAT .)
    *               reduce using rule 43 (expression -> FLOAT .)
    -               reduce using rule 43 (expression -> FLOAT .)
    +               reduce using rule 43 (expression -> FLOAT .)
    GE              reduce using rule 43 (expression -> FLOAT .)
    LE              reduce using rule 43 (expression -> FLOAT .)
    GT              reduce using rule 43 (expression -> FLOAT .)
    LT              reduce using rule 43 (expression -> FLOAT .)
    NE              reduce using rule 43 (expression -> FLOAT .)
    EQ              reduce using rule 43 (expression -> FLOAT .)
    LAND            reduce using rule 43 (expression -> FLOAT .)
    LOR             reduce using rule 43 (expression -> FLOAT .)
    {               reduce using rule 43 (expression -> FLOAT .)
    )               reduce using rule 43 (expression -> FLOAT .)
    ,               reduce using rule 43 (expression -> FLOAT .)


state 28

    (44) expression -> INTEGER .
    ;               reduce using rule 44 (expression -> INTEGER .)
    %               reduce using rule 44 (expression -> INTEGER .)
    /               reduce using rule 44 (expression -> INTEGER .)
    *               reduce using rule 44 (expression -> INTEGER .)
    -               reduce using rule 44 (expression -> INTEGER .)
    +               reduce using rule 44 (expression -> INTEGER .)
    GE              reduce using rule 44 (expression -> INTEGER .)
    LE              reduce using rule 44 (expression -> INTEGER .)
    GT              reduce using rule 44 (expression -> INTEGER .)
    LT              reduce using rule 44 (expression -> INTEGER .)
    NE              reduce using rule 44 (expression -> INTEGER .)
    EQ              reduce using rule 44 (expression -> INTEGER .)
    LAND            reduce using rule 44 (expression -> INTEGER .)
    LOR             reduce using rule 44 (expression -> INTEGER .)
    {               reduce using rule 44 (expression -> INTEGER .)
    )               reduce using rule 44 (expression -> INTEGER .)
    ,               reduce using rule 44 (expression -> INTEGER .)


state 29

    (45) expression -> primary .
    ;               reduce using rule 45 (expression -> primary .)
    %               reduce using rule 45 (expression -> primary .)
    /               reduce using rule 45 (expression -> primary .)
    *               reduce using rule 45 (expression -> primary .)
    -               reduce using rule 45 (expression -> primary .)
    +               reduce using rule 45 (expression -> primary .)
    GE              reduce using rule 45 (expression -> primary .)
    LE              reduce using rule 45 (expression -> primary .)
    GT              reduce using rule 45 (expression -> primary .)
    LT              reduce using rule 45 (expression -> primary .)
    NE              reduce using rule 45 (expression -> primary .)
    EQ              reduce using rule 45 (expression -> primary .)
    LAND            reduce using rule 45 (expression -> primary .)
    LOR             reduce using rule 45 (expression -> primary .)
    {               reduce using rule 45 (expression -> primary .)
    )               reduce using rule 45 (expression -> primary .)
    ,               reduce using rule 45 (expression -> primary .)


state 30

    (46) expression -> function_call .
    ;               reduce using rule 46 (expression -> function_call .)
    %               reduce using rule 46 (expression -> function_call .)
    /               reduce using rule 46 (expression -> function_call .)
    *               reduce using rule 46 (expression -> function_call .)
    -               reduce using rule 46 (expression -> function_call .)
    +               reduce using rule 46 (expression -> function_call .)
    GE              reduce using rule 46 (expression -> function_call .)
    LE              reduce using rule 46 (expression -> function_call .)
    GT              reduce using rule 46 (expression -> function_call .)
    LT              reduce using rule 46 (expression -> function_call .)
    NE              reduce using rule 46 (expression -> function_call .)
    EQ              reduce using rule 46 (expression -> function_call .)
    LAND            reduce using rule 46 (expression -> function_call .)
    LOR             reduce using rule 46 (expression -> function_call .)
    {               reduce using rule 46 (expression -> function_call .)
    )               reduce using rule 46 (expression -> function_call .)
    ,               reduce using rule 46 (expression -> function_call .)


state 31

    (47) expression -> - . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 59
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 32

    (61) primary -> location .
    ;               reduce using rule 61 (primary -> location .)
    %               reduce using rule 61 (primary -> location .)
    /               reduce using rule 61 (primary -> location .)
    *               reduce using rule 61 (primary -> location .)
    -               reduce using rule 61 (primary -> location .)
    +               reduce using rule 61 (primary -> location .)
    GE              reduce using rule 61 (primary -> location .)
    LE              reduce using rule 61 (primary -> location .)
    GT              reduce using rule 61 (primary -> location .)
    LT              reduce using rule 61 (primary -> location .)
    NE              reduce using rule 61 (primary -> location .)
    EQ              reduce using rule 61 (primary -> location .)
    LAND            reduce using rule 61 (primary -> location .)
    LOR             reduce using rule 61 (primary -> location .)
    {               reduce using rule 61 (primary -> location .)
    =               reduce using rule 61 (primary -> location .)
    )               reduce using rule 61 (primary -> location .)
    ,               reduce using rule 61 (primary -> location .)


state 33

    (62) primary -> ( . expression )
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 60
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 34

    (63) function_call -> ID . ( arguments_opt )
    (40) location -> ID .
    (               shift and go to state 61
    ;               reduce using rule 40 (location -> ID .)
    %               reduce using rule 40 (location -> ID .)
    /               reduce using rule 40 (location -> ID .)
    *               reduce using rule 40 (location -> ID .)
    -               reduce using rule 40 (location -> ID .)
    +               reduce using rule 40 (location -> ID .)
    GE              reduce using rule 40 (location -> ID .)
    LE              reduce using rule 40 (location -> ID .)
    GT              reduce using rule 40 (location -> ID .)
    LT              reduce using rule 40 (location -> ID .)
    NE              reduce using rule 40 (location -> ID .)
    EQ              reduce using rule 40 (location -> ID .)
    LAND            reduce using rule 40 (location -> ID .)
    LOR             reduce using rule 40 (location -> ID .)
    {               reduce using rule 40 (location -> ID .)
    )               reduce using rule 40 (location -> ID .)
    ,               reduce using rule 40 (location -> ID .)


state 35

    (6) statement -> CONTINUE ; .
    RETURN          reduce using rule 6 (statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 6 (statement -> CONTINUE ; .)
    BREAK           reduce using rule 6 (statement -> CONTINUE ; .)
    PRINT           reduce using rule 6 (statement -> CONTINUE ; .)
    WHILE           reduce using rule 6 (statement -> CONTINUE ; .)
    IF              reduce using rule 6 (statement -> CONTINUE ; .)
    CONST           reduce using rule 6 (statement -> CONTINUE ; .)
    VAR             reduce using rule 6 (statement -> CONTINUE ; .)
    IMPORT          reduce using rule 6 (statement -> CONTINUE ; .)
    BACKTICK        reduce using rule 6 (statement -> CONTINUE ; .)
    ID              reduce using rule 6 (statement -> CONTINUE ; .)
    FUNC            reduce using rule 6 (statement -> CONTINUE ; .)
    $end            reduce using rule 6 (statement -> CONTINUE ; .)
    }               reduce using rule 6 (statement -> CONTINUE ; .)


state 36

    (7) statement -> BREAK ; .
    RETURN          reduce using rule 7 (statement -> BREAK ; .)
    CONTINUE        reduce using rule 7 (statement -> BREAK ; .)
    BREAK           reduce using rule 7 (statement -> BREAK ; .)
    PRINT           reduce using rule 7 (statement -> BREAK ; .)
    WHILE           reduce using rule 7 (statement -> BREAK ; .)
    IF              reduce using rule 7 (statement -> BREAK ; .)
    CONST           reduce using rule 7 (statement -> BREAK ; .)
    VAR             reduce using rule 7 (statement -> BREAK ; .)
    IMPORT          reduce using rule 7 (statement -> BREAK ; .)
    BACKTICK        reduce using rule 7 (statement -> BREAK ; .)
    ID              reduce using rule 7 (statement -> BREAK ; .)
    FUNC            reduce using rule 7 (statement -> BREAK ; .)
    $end            reduce using rule 7 (statement -> BREAK ; .)
    }               reduce using rule 7 (statement -> BREAK ; .)


state 37

    (38) print_stmt -> PRINT expression . ;
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    ;               shift and go to state 62
    %               shift and go to state 46
    /               shift and go to state 47
    *               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50
    GE              shift and go to state 51
    LE              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    LAND            shift and go to state 57
    LOR             shift and go to state 58


state 38

    (37) while_stmt -> WHILE expression . block
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    (34) block -> . { statement_list }
    %               shift and go to state 46
    /               shift and go to state 47
    *               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50
    GE              shift and go to state 51
    LE              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    LAND            shift and go to state 57
    LOR             shift and go to state 58
    {               shift and go to state 64

    block                          shift and go to state 63

state 39

    (35) if_stmt -> IF expression . block ELSE block
    (36) if_stmt -> IF expression . block
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    (34) block -> . { statement_list }
    %               shift and go to state 46
    /               shift and go to state 47
    *               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50
    GE              shift and go to state 51
    LE              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    LAND            shift and go to state 57
    LOR             shift and go to state 58
    {               shift and go to state 64

    block                          shift and go to state 65

state 40

    (20) funcdecl -> opt_import FUNC . ID ( parameters_opt ) type_opt { statement_list }
    ID              shift and go to state 66


state 41

    (19) assignment -> location = . expression ;
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    location                       shift and go to state 32
    expression                     shift and go to state 67
    primary                        shift and go to state 29
    function_call                  shift and go to state 30

state 42

    (13) vardecl -> CONST ID . type opt_init ;
    (30) type -> . BOOL_TYPE
    (31) type -> . CHAR_TYPE
    (32) type -> . FLOAT_TYPE
    (33) type -> . INT_TYPE
    BOOL_TYPE       shift and go to state 69
    CHAR_TYPE       shift and go to state 70
    FLOAT_TYPE      shift and go to state 71
    INT_TYPE        shift and go to state 72

    type                           shift and go to state 68

state 43

    (14) vardecl -> VAR ID . opt_type opt_init ;
    (17) opt_type -> .
    (18) opt_type -> . type
    (30) type -> . BOOL_TYPE
    (31) type -> . CHAR_TYPE
    (32) type -> . FLOAT_TYPE
    (33) type -> . INT_TYPE
    =               reduce using rule 17 (opt_type -> .)
    ;               reduce using rule 17 (opt_type -> .)
    BOOL_TYPE       shift and go to state 69
    CHAR_TYPE       shift and go to state 70
    FLOAT_TYPE      shift and go to state 71
    INT_TYPE        shift and go to state 72

    opt_type                       shift and go to state 73
    type                           shift and go to state 74

state 44

    (39) location -> BACKTICK primary .
    =               reduce using rule 39 (location -> BACKTICK primary .)
    ;               reduce using rule 39 (location -> BACKTICK primary .)
    %               reduce using rule 39 (location -> BACKTICK primary .)
    /               reduce using rule 39 (location -> BACKTICK primary .)
    *               reduce using rule 39 (location -> BACKTICK primary .)
    -               reduce using rule 39 (location -> BACKTICK primary .)
    +               reduce using rule 39 (location -> BACKTICK primary .)
    GE              reduce using rule 39 (location -> BACKTICK primary .)
    LE              reduce using rule 39 (location -> BACKTICK primary .)
    GT              reduce using rule 39 (location -> BACKTICK primary .)
    LT              reduce using rule 39 (location -> BACKTICK primary .)
    NE              reduce using rule 39 (location -> BACKTICK primary .)
    EQ              reduce using rule 39 (location -> BACKTICK primary .)
    LAND            reduce using rule 39 (location -> BACKTICK primary .)
    LOR             reduce using rule 39 (location -> BACKTICK primary .)
    {               reduce using rule 39 (location -> BACKTICK primary .)
    )               reduce using rule 39 (location -> BACKTICK primary .)
    ,               reduce using rule 39 (location -> BACKTICK primary .)


state 45

    (5) statement -> RETURN expression ; .
    RETURN          reduce using rule 5 (statement -> RETURN expression ; .)
    CONTINUE        reduce using rule 5 (statement -> RETURN expression ; .)
    BREAK           reduce using rule 5 (statement -> RETURN expression ; .)
    PRINT           reduce using rule 5 (statement -> RETURN expression ; .)
    WHILE           reduce using rule 5 (statement -> RETURN expression ; .)
    IF              reduce using rule 5 (statement -> RETURN expression ; .)
    CONST           reduce using rule 5 (statement -> RETURN expression ; .)
    VAR             reduce using rule 5 (statement -> RETURN expression ; .)
    IMPORT          reduce using rule 5 (statement -> RETURN expression ; .)
    BACKTICK        reduce using rule 5 (statement -> RETURN expression ; .)
    ID              reduce using rule 5 (statement -> RETURN expression ; .)
    FUNC            reduce using rule 5 (statement -> RETURN expression ; .)
    $end            reduce using rule 5 (statement -> RETURN expression ; .)
    }               reduce using rule 5 (statement -> RETURN expression ; .)


state 46

    (48) expression -> expression % . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 75
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 47

    (49) expression -> expression / . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 76
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 48

    (50) expression -> expression * . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 77
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 49

    (51) expression -> expression - . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 78
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 50

    (52) expression -> expression + . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 79
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 51

    (53) expression -> expression GE . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 80
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 52

    (54) expression -> expression LE . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 81
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 53

    (55) expression -> expression GT . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 82
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 54

    (56) expression -> expression LT . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 83
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 55

    (57) expression -> expression NE . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 84
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 56

    (58) expression -> expression EQ . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 85
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 57

    (59) expression -> expression LAND . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 86
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 58

    (60) expression -> expression LOR . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 87
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 59

    (47) expression -> - expression .
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    ;               reduce using rule 47 (expression -> - expression .)
    %               reduce using rule 47 (expression -> - expression .)
    /               reduce using rule 47 (expression -> - expression .)
    *               reduce using rule 47 (expression -> - expression .)
    -               reduce using rule 47 (expression -> - expression .)
    +               reduce using rule 47 (expression -> - expression .)
    GE              reduce using rule 47 (expression -> - expression .)
    LE              reduce using rule 47 (expression -> - expression .)
    GT              reduce using rule 47 (expression -> - expression .)
    LT              reduce using rule 47 (expression -> - expression .)
    NE              reduce using rule 47 (expression -> - expression .)
    EQ              reduce using rule 47 (expression -> - expression .)
    LAND            reduce using rule 47 (expression -> - expression .)
    LOR             reduce using rule 47 (expression -> - expression .)
    {               reduce using rule 47 (expression -> - expression .)
    )               reduce using rule 47 (expression -> - expression .)
    ,               reduce using rule 47 (expression -> - expression .)


state 60

    (62) primary -> ( expression . )
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    )               shift and go to state 88
    %               shift and go to state 46
    /               shift and go to state 47
    *               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50
    GE              shift and go to state 51
    LE              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    LAND            shift and go to state 57
    LOR             shift and go to state 58


state 61

    (63) function_call -> ID ( . arguments_opt )
    (64) arguments_opt -> .
    (65) arguments_opt -> . arguments
    (66) arguments -> . arguments , expression
    (67) arguments -> . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    )               reduce using rule 64 (arguments_opt -> .)
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    arguments_opt                  shift and go to state 89
    arguments                      shift and go to state 90
    expression                     shift and go to state 91
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 62

    (38) print_stmt -> PRINT expression ; .
    RETURN          reduce using rule 38 (print_stmt -> PRINT expression ; .)
    CONTINUE        reduce using rule 38 (print_stmt -> PRINT expression ; .)
    BREAK           reduce using rule 38 (print_stmt -> PRINT expression ; .)
    PRINT           reduce using rule 38 (print_stmt -> PRINT expression ; .)
    WHILE           reduce using rule 38 (print_stmt -> PRINT expression ; .)
    IF              reduce using rule 38 (print_stmt -> PRINT expression ; .)
    CONST           reduce using rule 38 (print_stmt -> PRINT expression ; .)
    VAR             reduce using rule 38 (print_stmt -> PRINT expression ; .)
    IMPORT          reduce using rule 38 (print_stmt -> PRINT expression ; .)
    BACKTICK        reduce using rule 38 (print_stmt -> PRINT expression ; .)
    ID              reduce using rule 38 (print_stmt -> PRINT expression ; .)
    FUNC            reduce using rule 38 (print_stmt -> PRINT expression ; .)
    $end            reduce using rule 38 (print_stmt -> PRINT expression ; .)
    }               reduce using rule 38 (print_stmt -> PRINT expression ; .)


state 63

    (37) while_stmt -> WHILE expression block .
    RETURN          reduce using rule 37 (while_stmt -> WHILE expression block .)
    CONTINUE        reduce using rule 37 (while_stmt -> WHILE expression block .)
    BREAK           reduce using rule 37 (while_stmt -> WHILE expression block .)
    PRINT           reduce using rule 37 (while_stmt -> WHILE expression block .)
    WHILE           reduce using rule 37 (while_stmt -> WHILE expression block .)
    IF              reduce using rule 37 (while_stmt -> WHILE expression block .)
    CONST           reduce using rule 37 (while_stmt -> WHILE expression block .)
    VAR             reduce using rule 37 (while_stmt -> WHILE expression block .)
    IMPORT          reduce using rule 37 (while_stmt -> WHILE expression block .)
    BACKTICK        reduce using rule 37 (while_stmt -> WHILE expression block .)
    ID              reduce using rule 37 (while_stmt -> WHILE expression block .)
    FUNC            reduce using rule 37 (while_stmt -> WHILE expression block .)
    $end            reduce using rule 37 (while_stmt -> WHILE expression block .)
    }               reduce using rule 37 (while_stmt -> WHILE expression block .)


state 64

    (34) block -> { . statement_list }
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_stmt
    (5) statement -> . RETURN expression ;
    (6) statement -> . CONTINUE ;
    (7) statement -> . BREAK ;
    (8) statement -> . while_stmt
    (9) statement -> . if_stmt
    (10) statement -> . funcdecl
    (11) statement -> . assignment
    (12) statement -> . vardecl
    (38) print_stmt -> . PRINT expression ;
    (37) while_stmt -> . WHILE expression block
    (35) if_stmt -> . IF expression block ELSE block
    (36) if_stmt -> . IF expression block
    (20) funcdecl -> . opt_import FUNC ID ( parameters_opt ) type_opt { statement_list }
    (19) assignment -> . location = expression ;
    (13) vardecl -> . CONST ID type opt_init ;
    (14) vardecl -> . VAR ID opt_type opt_init ;
    (21) opt_import -> .
    (22) opt_import -> . IMPORT
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    FUNC            reduce using rule 21 (opt_import -> .)
    IMPORT          shift and go to state 21
    BACKTICK        shift and go to state 22
    ID              shift and go to state 17

    statement_list                 shift and go to state 92
    statement                      shift and go to state 3
    print_stmt                     shift and go to state 4
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    opt_import                     shift and go to state 16
    location                       shift and go to state 18

state 65

    (35) if_stmt -> IF expression block . ELSE block
    (36) if_stmt -> IF expression block .
    ELSE            shift and go to state 93
    RETURN          reduce using rule 36 (if_stmt -> IF expression block .)
    CONTINUE        reduce using rule 36 (if_stmt -> IF expression block .)
    BREAK           reduce using rule 36 (if_stmt -> IF expression block .)
    PRINT           reduce using rule 36 (if_stmt -> IF expression block .)
    WHILE           reduce using rule 36 (if_stmt -> IF expression block .)
    IF              reduce using rule 36 (if_stmt -> IF expression block .)
    CONST           reduce using rule 36 (if_stmt -> IF expression block .)
    VAR             reduce using rule 36 (if_stmt -> IF expression block .)
    IMPORT          reduce using rule 36 (if_stmt -> IF expression block .)
    BACKTICK        reduce using rule 36 (if_stmt -> IF expression block .)
    ID              reduce using rule 36 (if_stmt -> IF expression block .)
    FUNC            reduce using rule 36 (if_stmt -> IF expression block .)
    $end            reduce using rule 36 (if_stmt -> IF expression block .)
    }               reduce using rule 36 (if_stmt -> IF expression block .)


state 66

    (20) funcdecl -> opt_import FUNC ID . ( parameters_opt ) type_opt { statement_list }
    (               shift and go to state 94


state 67

    (19) assignment -> location = expression . ;
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    ;               shift and go to state 95
    %               shift and go to state 46
    /               shift and go to state 47
    *               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50
    GE              shift and go to state 51
    LE              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    LAND            shift and go to state 57
    LOR             shift and go to state 58


state 68

    (13) vardecl -> CONST ID type . opt_init ;
    (15) opt_init -> .
    (16) opt_init -> . = expression
    ;               reduce using rule 15 (opt_init -> .)
    =               shift and go to state 97

    opt_init                       shift and go to state 96

state 69

    (30) type -> BOOL_TYPE .
    =               reduce using rule 30 (type -> BOOL_TYPE .)
    ;               reduce using rule 30 (type -> BOOL_TYPE .)
    ,               reduce using rule 30 (type -> BOOL_TYPE .)
    )               reduce using rule 30 (type -> BOOL_TYPE .)
    {               reduce using rule 30 (type -> BOOL_TYPE .)


state 70

    (31) type -> CHAR_TYPE .
    =               reduce using rule 31 (type -> CHAR_TYPE .)
    ;               reduce using rule 31 (type -> CHAR_TYPE .)
    ,               reduce using rule 31 (type -> CHAR_TYPE .)
    )               reduce using rule 31 (type -> CHAR_TYPE .)
    {               reduce using rule 31 (type -> CHAR_TYPE .)


state 71

    (32) type -> FLOAT_TYPE .
    =               reduce using rule 32 (type -> FLOAT_TYPE .)
    ;               reduce using rule 32 (type -> FLOAT_TYPE .)
    ,               reduce using rule 32 (type -> FLOAT_TYPE .)
    )               reduce using rule 32 (type -> FLOAT_TYPE .)
    {               reduce using rule 32 (type -> FLOAT_TYPE .)


state 72

    (33) type -> INT_TYPE .
    =               reduce using rule 33 (type -> INT_TYPE .)
    ;               reduce using rule 33 (type -> INT_TYPE .)
    ,               reduce using rule 33 (type -> INT_TYPE .)
    )               reduce using rule 33 (type -> INT_TYPE .)
    {               reduce using rule 33 (type -> INT_TYPE .)


state 73

    (14) vardecl -> VAR ID opt_type . opt_init ;
    (15) opt_init -> .
    (16) opt_init -> . = expression
    ;               reduce using rule 15 (opt_init -> .)
    =               shift and go to state 97

    opt_init                       shift and go to state 98

state 74

    (18) opt_type -> type .
    =               reduce using rule 18 (opt_type -> type .)
    ;               reduce using rule 18 (opt_type -> type .)


state 75

    (48) expression -> expression % expression .
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LAND resolved as shift
  ! shift/reduce conflict for LOR resolved as shift
    ;               reduce using rule 48 (expression -> expression % expression .)
    {               reduce using rule 48 (expression -> expression % expression .)
    )               reduce using rule 48 (expression -> expression % expression .)
    ,               reduce using rule 48 (expression -> expression % expression .)
    %               shift and go to state 46
    /               shift and go to state 47
    *               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50
    GE              shift and go to state 51
    LE              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    LAND            shift and go to state 57
    LOR             shift and go to state 58


state 76

    (49) expression -> expression / expression .
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    ;               reduce using rule 49 (expression -> expression / expression .)
    %               reduce using rule 49 (expression -> expression / expression .)
    /               reduce using rule 49 (expression -> expression / expression .)
    *               reduce using rule 49 (expression -> expression / expression .)
    -               reduce using rule 49 (expression -> expression / expression .)
    +               reduce using rule 49 (expression -> expression / expression .)
    GE              reduce using rule 49 (expression -> expression / expression .)
    LE              reduce using rule 49 (expression -> expression / expression .)
    GT              reduce using rule 49 (expression -> expression / expression .)
    LT              reduce using rule 49 (expression -> expression / expression .)
    NE              reduce using rule 49 (expression -> expression / expression .)
    EQ              reduce using rule 49 (expression -> expression / expression .)
    LAND            reduce using rule 49 (expression -> expression / expression .)
    LOR             reduce using rule 49 (expression -> expression / expression .)
    {               reduce using rule 49 (expression -> expression / expression .)
    )               reduce using rule 49 (expression -> expression / expression .)
    ,               reduce using rule 49 (expression -> expression / expression .)


state 77

    (50) expression -> expression * expression .
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    ;               reduce using rule 50 (expression -> expression * expression .)
    %               reduce using rule 50 (expression -> expression * expression .)
    /               reduce using rule 50 (expression -> expression * expression .)
    *               reduce using rule 50 (expression -> expression * expression .)
    -               reduce using rule 50 (expression -> expression * expression .)
    +               reduce using rule 50 (expression -> expression * expression .)
    GE              reduce using rule 50 (expression -> expression * expression .)
    LE              reduce using rule 50 (expression -> expression * expression .)
    GT              reduce using rule 50 (expression -> expression * expression .)
    LT              reduce using rule 50 (expression -> expression * expression .)
    NE              reduce using rule 50 (expression -> expression * expression .)
    EQ              reduce using rule 50 (expression -> expression * expression .)
    LAND            reduce using rule 50 (expression -> expression * expression .)
    LOR             reduce using rule 50 (expression -> expression * expression .)
    {               reduce using rule 50 (expression -> expression * expression .)
    )               reduce using rule 50 (expression -> expression * expression .)
    ,               reduce using rule 50 (expression -> expression * expression .)


state 78

    (51) expression -> expression - expression .
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    ;               reduce using rule 51 (expression -> expression - expression .)
    %               reduce using rule 51 (expression -> expression - expression .)
    -               reduce using rule 51 (expression -> expression - expression .)
    +               reduce using rule 51 (expression -> expression - expression .)
    GE              reduce using rule 51 (expression -> expression - expression .)
    LE              reduce using rule 51 (expression -> expression - expression .)
    GT              reduce using rule 51 (expression -> expression - expression .)
    LT              reduce using rule 51 (expression -> expression - expression .)
    NE              reduce using rule 51 (expression -> expression - expression .)
    EQ              reduce using rule 51 (expression -> expression - expression .)
    LAND            reduce using rule 51 (expression -> expression - expression .)
    LOR             reduce using rule 51 (expression -> expression - expression .)
    {               reduce using rule 51 (expression -> expression - expression .)
    )               reduce using rule 51 (expression -> expression - expression .)
    ,               reduce using rule 51 (expression -> expression - expression .)
    /               shift and go to state 47
    *               shift and go to state 48


state 79

    (52) expression -> expression + expression .
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    ;               reduce using rule 52 (expression -> expression + expression .)
    %               reduce using rule 52 (expression -> expression + expression .)
    -               reduce using rule 52 (expression -> expression + expression .)
    +               reduce using rule 52 (expression -> expression + expression .)
    GE              reduce using rule 52 (expression -> expression + expression .)
    LE              reduce using rule 52 (expression -> expression + expression .)
    GT              reduce using rule 52 (expression -> expression + expression .)
    LT              reduce using rule 52 (expression -> expression + expression .)
    NE              reduce using rule 52 (expression -> expression + expression .)
    EQ              reduce using rule 52 (expression -> expression + expression .)
    LAND            reduce using rule 52 (expression -> expression + expression .)
    LOR             reduce using rule 52 (expression -> expression + expression .)
    {               reduce using rule 52 (expression -> expression + expression .)
    )               reduce using rule 52 (expression -> expression + expression .)
    ,               reduce using rule 52 (expression -> expression + expression .)
    /               shift and go to state 47
    *               shift and go to state 48


state 80

    (53) expression -> expression GE expression .
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    ;               reduce using rule 53 (expression -> expression GE expression .)
    %               reduce using rule 53 (expression -> expression GE expression .)
    GE              reduce using rule 53 (expression -> expression GE expression .)
    LE              reduce using rule 53 (expression -> expression GE expression .)
    GT              reduce using rule 53 (expression -> expression GE expression .)
    LT              reduce using rule 53 (expression -> expression GE expression .)
    NE              reduce using rule 53 (expression -> expression GE expression .)
    EQ              reduce using rule 53 (expression -> expression GE expression .)
    LAND            reduce using rule 53 (expression -> expression GE expression .)
    LOR             reduce using rule 53 (expression -> expression GE expression .)
    {               reduce using rule 53 (expression -> expression GE expression .)
    )               reduce using rule 53 (expression -> expression GE expression .)
    ,               reduce using rule 53 (expression -> expression GE expression .)
    /               shift and go to state 47
    *               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 81

    (54) expression -> expression LE expression .
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    ;               reduce using rule 54 (expression -> expression LE expression .)
    %               reduce using rule 54 (expression -> expression LE expression .)
    GE              reduce using rule 54 (expression -> expression LE expression .)
    LE              reduce using rule 54 (expression -> expression LE expression .)
    GT              reduce using rule 54 (expression -> expression LE expression .)
    LT              reduce using rule 54 (expression -> expression LE expression .)
    NE              reduce using rule 54 (expression -> expression LE expression .)
    EQ              reduce using rule 54 (expression -> expression LE expression .)
    LAND            reduce using rule 54 (expression -> expression LE expression .)
    LOR             reduce using rule 54 (expression -> expression LE expression .)
    {               reduce using rule 54 (expression -> expression LE expression .)
    )               reduce using rule 54 (expression -> expression LE expression .)
    ,               reduce using rule 54 (expression -> expression LE expression .)
    /               shift and go to state 47
    *               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 82

    (55) expression -> expression GT expression .
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    ;               reduce using rule 55 (expression -> expression GT expression .)
    %               reduce using rule 55 (expression -> expression GT expression .)
    GE              reduce using rule 55 (expression -> expression GT expression .)
    LE              reduce using rule 55 (expression -> expression GT expression .)
    GT              reduce using rule 55 (expression -> expression GT expression .)
    LT              reduce using rule 55 (expression -> expression GT expression .)
    NE              reduce using rule 55 (expression -> expression GT expression .)
    EQ              reduce using rule 55 (expression -> expression GT expression .)
    LAND            reduce using rule 55 (expression -> expression GT expression .)
    LOR             reduce using rule 55 (expression -> expression GT expression .)
    {               reduce using rule 55 (expression -> expression GT expression .)
    )               reduce using rule 55 (expression -> expression GT expression .)
    ,               reduce using rule 55 (expression -> expression GT expression .)
    /               shift and go to state 47
    *               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 83

    (56) expression -> expression LT expression .
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    ;               reduce using rule 56 (expression -> expression LT expression .)
    %               reduce using rule 56 (expression -> expression LT expression .)
    GE              reduce using rule 56 (expression -> expression LT expression .)
    LE              reduce using rule 56 (expression -> expression LT expression .)
    GT              reduce using rule 56 (expression -> expression LT expression .)
    LT              reduce using rule 56 (expression -> expression LT expression .)
    NE              reduce using rule 56 (expression -> expression LT expression .)
    EQ              reduce using rule 56 (expression -> expression LT expression .)
    LAND            reduce using rule 56 (expression -> expression LT expression .)
    LOR             reduce using rule 56 (expression -> expression LT expression .)
    {               reduce using rule 56 (expression -> expression LT expression .)
    )               reduce using rule 56 (expression -> expression LT expression .)
    ,               reduce using rule 56 (expression -> expression LT expression .)
    /               shift and go to state 47
    *               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 84

    (57) expression -> expression NE expression .
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    ;               reduce using rule 57 (expression -> expression NE expression .)
    %               reduce using rule 57 (expression -> expression NE expression .)
    NE              reduce using rule 57 (expression -> expression NE expression .)
    EQ              reduce using rule 57 (expression -> expression NE expression .)
    LAND            reduce using rule 57 (expression -> expression NE expression .)
    LOR             reduce using rule 57 (expression -> expression NE expression .)
    {               reduce using rule 57 (expression -> expression NE expression .)
    )               reduce using rule 57 (expression -> expression NE expression .)
    ,               reduce using rule 57 (expression -> expression NE expression .)
    /               shift and go to state 47
    *               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50
    GE              shift and go to state 51
    LE              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54


state 85

    (58) expression -> expression EQ expression .
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    ;               reduce using rule 58 (expression -> expression EQ expression .)
    %               reduce using rule 58 (expression -> expression EQ expression .)
    NE              reduce using rule 58 (expression -> expression EQ expression .)
    EQ              reduce using rule 58 (expression -> expression EQ expression .)
    LAND            reduce using rule 58 (expression -> expression EQ expression .)
    LOR             reduce using rule 58 (expression -> expression EQ expression .)
    {               reduce using rule 58 (expression -> expression EQ expression .)
    )               reduce using rule 58 (expression -> expression EQ expression .)
    ,               reduce using rule 58 (expression -> expression EQ expression .)
    /               shift and go to state 47
    *               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50
    GE              shift and go to state 51
    LE              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54


state 86

    (59) expression -> expression LAND expression .
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    ;               reduce using rule 59 (expression -> expression LAND expression .)
    %               reduce using rule 59 (expression -> expression LAND expression .)
    LAND            reduce using rule 59 (expression -> expression LAND expression .)
    LOR             reduce using rule 59 (expression -> expression LAND expression .)
    {               reduce using rule 59 (expression -> expression LAND expression .)
    )               reduce using rule 59 (expression -> expression LAND expression .)
    ,               reduce using rule 59 (expression -> expression LAND expression .)
    /               shift and go to state 47
    *               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50
    GE              shift and go to state 51
    LE              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56


state 87

    (60) expression -> expression LOR expression .
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    ;               reduce using rule 60 (expression -> expression LOR expression .)
    %               reduce using rule 60 (expression -> expression LOR expression .)
    LOR             reduce using rule 60 (expression -> expression LOR expression .)
    {               reduce using rule 60 (expression -> expression LOR expression .)
    )               reduce using rule 60 (expression -> expression LOR expression .)
    ,               reduce using rule 60 (expression -> expression LOR expression .)
    /               shift and go to state 47
    *               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50
    GE              shift and go to state 51
    LE              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    LAND            shift and go to state 57


state 88

    (62) primary -> ( expression ) .
    ;               reduce using rule 62 (primary -> ( expression ) .)
    %               reduce using rule 62 (primary -> ( expression ) .)
    /               reduce using rule 62 (primary -> ( expression ) .)
    *               reduce using rule 62 (primary -> ( expression ) .)
    -               reduce using rule 62 (primary -> ( expression ) .)
    +               reduce using rule 62 (primary -> ( expression ) .)
    GE              reduce using rule 62 (primary -> ( expression ) .)
    LE              reduce using rule 62 (primary -> ( expression ) .)
    GT              reduce using rule 62 (primary -> ( expression ) .)
    LT              reduce using rule 62 (primary -> ( expression ) .)
    NE              reduce using rule 62 (primary -> ( expression ) .)
    EQ              reduce using rule 62 (primary -> ( expression ) .)
    LAND            reduce using rule 62 (primary -> ( expression ) .)
    LOR             reduce using rule 62 (primary -> ( expression ) .)
    {               reduce using rule 62 (primary -> ( expression ) .)
    =               reduce using rule 62 (primary -> ( expression ) .)
    )               reduce using rule 62 (primary -> ( expression ) .)
    ,               reduce using rule 62 (primary -> ( expression ) .)


state 89

    (63) function_call -> ID ( arguments_opt . )
    )               shift and go to state 99


state 90

    (65) arguments_opt -> arguments .
    (66) arguments -> arguments . , expression
    )               reduce using rule 65 (arguments_opt -> arguments .)
    ,               shift and go to state 100


state 91

    (67) arguments -> expression .
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    ,               reduce using rule 67 (arguments -> expression .)
    )               reduce using rule 67 (arguments -> expression .)
    %               shift and go to state 46
    /               shift and go to state 47
    *               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50
    GE              shift and go to state 51
    LE              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    LAND            shift and go to state 57
    LOR             shift and go to state 58


state 92

    (34) block -> { statement_list . }
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_stmt
    (5) statement -> . RETURN expression ;
    (6) statement -> . CONTINUE ;
    (7) statement -> . BREAK ;
    (8) statement -> . while_stmt
    (9) statement -> . if_stmt
    (10) statement -> . funcdecl
    (11) statement -> . assignment
    (12) statement -> . vardecl
    (38) print_stmt -> . PRINT expression ;
    (37) while_stmt -> . WHILE expression block
    (35) if_stmt -> . IF expression block ELSE block
    (36) if_stmt -> . IF expression block
    (20) funcdecl -> . opt_import FUNC ID ( parameters_opt ) type_opt { statement_list }
    (19) assignment -> . location = expression ;
    (13) vardecl -> . CONST ID type opt_init ;
    (14) vardecl -> . VAR ID opt_type opt_init ;
    (21) opt_import -> .
    (22) opt_import -> . IMPORT
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    }               shift and go to state 101
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    FUNC            reduce using rule 21 (opt_import -> .)
    IMPORT          shift and go to state 21
    BACKTICK        shift and go to state 22
    ID              shift and go to state 17

    statement                      shift and go to state 23
    print_stmt                     shift and go to state 4
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    opt_import                     shift and go to state 16
    location                       shift and go to state 18

state 93

    (35) if_stmt -> IF expression block ELSE . block
    (34) block -> . { statement_list }
    {               shift and go to state 64

    block                          shift and go to state 102

state 94

    (20) funcdecl -> opt_import FUNC ID ( . parameters_opt ) type_opt { statement_list }
    (23) parameters_opt -> .
    (24) parameters_opt -> . parameters
    (27) parameters -> . parameters , param
    (28) parameters -> . param
    (29) param -> . ID type
    )               reduce using rule 23 (parameters_opt -> .)
    ID              shift and go to state 103

    parameters_opt                 shift and go to state 104
    parameters                     shift and go to state 105
    param                          shift and go to state 106

state 95

    (19) assignment -> location = expression ; .
    RETURN          reduce using rule 19 (assignment -> location = expression ; .)
    CONTINUE        reduce using rule 19 (assignment -> location = expression ; .)
    BREAK           reduce using rule 19 (assignment -> location = expression ; .)
    PRINT           reduce using rule 19 (assignment -> location = expression ; .)
    WHILE           reduce using rule 19 (assignment -> location = expression ; .)
    IF              reduce using rule 19 (assignment -> location = expression ; .)
    CONST           reduce using rule 19 (assignment -> location = expression ; .)
    VAR             reduce using rule 19 (assignment -> location = expression ; .)
    IMPORT          reduce using rule 19 (assignment -> location = expression ; .)
    BACKTICK        reduce using rule 19 (assignment -> location = expression ; .)
    ID              reduce using rule 19 (assignment -> location = expression ; .)
    FUNC            reduce using rule 19 (assignment -> location = expression ; .)
    $end            reduce using rule 19 (assignment -> location = expression ; .)
    }               reduce using rule 19 (assignment -> location = expression ; .)


state 96

    (13) vardecl -> CONST ID type opt_init . ;
    ;               shift and go to state 107


state 97

    (16) opt_init -> = . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 108
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 98

    (14) vardecl -> VAR ID opt_type opt_init . ;
    ;               shift and go to state 109


state 99

    (63) function_call -> ID ( arguments_opt ) .
    ;               reduce using rule 63 (function_call -> ID ( arguments_opt ) .)
    %               reduce using rule 63 (function_call -> ID ( arguments_opt ) .)
    /               reduce using rule 63 (function_call -> ID ( arguments_opt ) .)
    *               reduce using rule 63 (function_call -> ID ( arguments_opt ) .)
    -               reduce using rule 63 (function_call -> ID ( arguments_opt ) .)
    +               reduce using rule 63 (function_call -> ID ( arguments_opt ) .)
    GE              reduce using rule 63 (function_call -> ID ( arguments_opt ) .)
    LE              reduce using rule 63 (function_call -> ID ( arguments_opt ) .)
    GT              reduce using rule 63 (function_call -> ID ( arguments_opt ) .)
    LT              reduce using rule 63 (function_call -> ID ( arguments_opt ) .)
    NE              reduce using rule 63 (function_call -> ID ( arguments_opt ) .)
    EQ              reduce using rule 63 (function_call -> ID ( arguments_opt ) .)
    LAND            reduce using rule 63 (function_call -> ID ( arguments_opt ) .)
    LOR             reduce using rule 63 (function_call -> ID ( arguments_opt ) .)
    {               reduce using rule 63 (function_call -> ID ( arguments_opt ) .)
    )               reduce using rule 63 (function_call -> ID ( arguments_opt ) .)
    ,               reduce using rule 63 (function_call -> ID ( arguments_opt ) .)


state 100

    (66) arguments -> arguments , . expression
    (41) expression -> . BOOL
    (42) expression -> . CHAR
    (43) expression -> . FLOAT
    (44) expression -> . INTEGER
    (45) expression -> . primary
    (46) expression -> . function_call
    (47) expression -> . - expression
    (48) expression -> . expression % expression
    (49) expression -> . expression / expression
    (50) expression -> . expression * expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . expression GE expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression LT expression
    (57) expression -> . expression NE expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression LAND expression
    (60) expression -> . expression LOR expression
    (61) primary -> . location
    (62) primary -> . ( expression )
    (63) function_call -> . ID ( arguments_opt )
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    BOOL            shift and go to state 25
    CHAR            shift and go to state 26
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    -               shift and go to state 31
    (               shift and go to state 33
    ID              shift and go to state 34
    BACKTICK        shift and go to state 22

    expression                     shift and go to state 110
    primary                        shift and go to state 29
    function_call                  shift and go to state 30
    location                       shift and go to state 32

state 101

    (34) block -> { statement_list } .
    RETURN          reduce using rule 34 (block -> { statement_list } .)
    CONTINUE        reduce using rule 34 (block -> { statement_list } .)
    BREAK           reduce using rule 34 (block -> { statement_list } .)
    PRINT           reduce using rule 34 (block -> { statement_list } .)
    WHILE           reduce using rule 34 (block -> { statement_list } .)
    IF              reduce using rule 34 (block -> { statement_list } .)
    CONST           reduce using rule 34 (block -> { statement_list } .)
    VAR             reduce using rule 34 (block -> { statement_list } .)
    IMPORT          reduce using rule 34 (block -> { statement_list } .)
    BACKTICK        reduce using rule 34 (block -> { statement_list } .)
    ID              reduce using rule 34 (block -> { statement_list } .)
    FUNC            reduce using rule 34 (block -> { statement_list } .)
    $end            reduce using rule 34 (block -> { statement_list } .)
    }               reduce using rule 34 (block -> { statement_list } .)
    ELSE            reduce using rule 34 (block -> { statement_list } .)


state 102

    (35) if_stmt -> IF expression block ELSE block .
    RETURN          reduce using rule 35 (if_stmt -> IF expression block ELSE block .)
    CONTINUE        reduce using rule 35 (if_stmt -> IF expression block ELSE block .)
    BREAK           reduce using rule 35 (if_stmt -> IF expression block ELSE block .)
    PRINT           reduce using rule 35 (if_stmt -> IF expression block ELSE block .)
    WHILE           reduce using rule 35 (if_stmt -> IF expression block ELSE block .)
    IF              reduce using rule 35 (if_stmt -> IF expression block ELSE block .)
    CONST           reduce using rule 35 (if_stmt -> IF expression block ELSE block .)
    VAR             reduce using rule 35 (if_stmt -> IF expression block ELSE block .)
    IMPORT          reduce using rule 35 (if_stmt -> IF expression block ELSE block .)
    BACKTICK        reduce using rule 35 (if_stmt -> IF expression block ELSE block .)
    ID              reduce using rule 35 (if_stmt -> IF expression block ELSE block .)
    FUNC            reduce using rule 35 (if_stmt -> IF expression block ELSE block .)
    $end            reduce using rule 35 (if_stmt -> IF expression block ELSE block .)
    }               reduce using rule 35 (if_stmt -> IF expression block ELSE block .)


state 103

    (29) param -> ID . type
    (30) type -> . BOOL_TYPE
    (31) type -> . CHAR_TYPE
    (32) type -> . FLOAT_TYPE
    (33) type -> . INT_TYPE
    BOOL_TYPE       shift and go to state 69
    CHAR_TYPE       shift and go to state 70
    FLOAT_TYPE      shift and go to state 71
    INT_TYPE        shift and go to state 72

    type                           shift and go to state 111

state 104

    (20) funcdecl -> opt_import FUNC ID ( parameters_opt . ) type_opt { statement_list }
    )               shift and go to state 112


state 105

    (24) parameters_opt -> parameters .
    (27) parameters -> parameters . , param
    )               reduce using rule 24 (parameters_opt -> parameters .)
    ,               shift and go to state 113


state 106

    (28) parameters -> param .
    ,               reduce using rule 28 (parameters -> param .)
    )               reduce using rule 28 (parameters -> param .)


state 107

    (13) vardecl -> CONST ID type opt_init ; .
    RETURN          reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    CONTINUE        reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    BREAK           reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    PRINT           reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    WHILE           reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    IF              reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    CONST           reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    VAR             reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    IMPORT          reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    BACKTICK        reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    ID              reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    FUNC            reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    $end            reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)
    }               reduce using rule 13 (vardecl -> CONST ID type opt_init ; .)


state 108

    (16) opt_init -> = expression .
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    ;               reduce using rule 16 (opt_init -> = expression .)
    %               shift and go to state 46
    /               shift and go to state 47
    *               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50
    GE              shift and go to state 51
    LE              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    LAND            shift and go to state 57
    LOR             shift and go to state 58


state 109

    (14) vardecl -> VAR ID opt_type opt_init ; .
    RETURN          reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    CONTINUE        reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    BREAK           reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    PRINT           reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    WHILE           reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    IF              reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    CONST           reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    VAR             reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    IMPORT          reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    BACKTICK        reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    ID              reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    FUNC            reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    $end            reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)
    }               reduce using rule 14 (vardecl -> VAR ID opt_type opt_init ; .)


state 110

    (66) arguments -> arguments , expression .
    (48) expression -> expression . % expression
    (49) expression -> expression . / expression
    (50) expression -> expression . * expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (53) expression -> expression . GE expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . LT expression
    (57) expression -> expression . NE expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . LAND expression
    (60) expression -> expression . LOR expression
    ,               reduce using rule 66 (arguments -> arguments , expression .)
    )               reduce using rule 66 (arguments -> arguments , expression .)
    %               shift and go to state 46
    /               shift and go to state 47
    *               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50
    GE              shift and go to state 51
    LE              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    LAND            shift and go to state 57
    LOR             shift and go to state 58


state 111

    (29) param -> ID type .
    ,               reduce using rule 29 (param -> ID type .)
    )               reduce using rule 29 (param -> ID type .)


state 112

    (20) funcdecl -> opt_import FUNC ID ( parameters_opt ) . type_opt { statement_list }
    (25) type_opt -> .
    (26) type_opt -> . type
    (30) type -> . BOOL_TYPE
    (31) type -> . CHAR_TYPE
    (32) type -> . FLOAT_TYPE
    (33) type -> . INT_TYPE
    {               reduce using rule 25 (type_opt -> .)
    BOOL_TYPE       shift and go to state 69
    CHAR_TYPE       shift and go to state 70
    FLOAT_TYPE      shift and go to state 71
    INT_TYPE        shift and go to state 72

    type_opt                       shift and go to state 114
    type                           shift and go to state 115

state 113

    (27) parameters -> parameters , . param
    (29) param -> . ID type
    ID              shift and go to state 103

    param                          shift and go to state 116

state 114

    (20) funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt . { statement_list }
    {               shift and go to state 117


state 115

    (26) type_opt -> type .
    {               reduce using rule 26 (type_opt -> type .)


state 116

    (27) parameters -> parameters , param .
    ,               reduce using rule 27 (parameters -> parameters , param .)
    )               reduce using rule 27 (parameters -> parameters , param .)


state 117

    (20) funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { . statement_list }
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . print_stmt
    (5) statement -> . RETURN expression ;
    (6) statement -> . CONTINUE ;
    (7) statement -> . BREAK ;
    (8) statement -> . while_stmt
    (9) statement -> . if_stmt
    (10) statement -> . funcdecl
    (11) statement -> . assignment
    (12) statement -> . vardecl
    (38) print_stmt -> . PRINT expression ;
    (37) while_stmt -> . WHILE expression block
    (35) if_stmt -> . IF expression block ELSE block
    (36) if_stmt -> . IF expression block
    (20) funcdecl -> . opt_import FUNC ID ( parameters_opt ) type_opt { statement_list }
    (19) assignment -> . location = expression ;
    (13) vardecl -> . CONST ID type opt_init ;
    (14) vardecl -> . VAR ID opt_type opt_init ;
    (21) opt_import -> .
    (22) opt_import -> . IMPORT
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    FUNC            reduce using rule 21 (opt_import -> .)
    IMPORT          shift and go to state 21
    BACKTICK        shift and go to state 22
    ID              shift and go to state 17

    opt_import                     shift and go to state 16
    statement_list                 shift and go to state 118
    statement                      shift and go to state 3
    print_stmt                     shift and go to state 4
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    location                       shift and go to state 18

state 118

    (20) funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list . }
    (3) statement_list -> statement_list . statement
    (4) statement -> . print_stmt
    (5) statement -> . RETURN expression ;
    (6) statement -> . CONTINUE ;
    (7) statement -> . BREAK ;
    (8) statement -> . while_stmt
    (9) statement -> . if_stmt
    (10) statement -> . funcdecl
    (11) statement -> . assignment
    (12) statement -> . vardecl
    (38) print_stmt -> . PRINT expression ;
    (37) while_stmt -> . WHILE expression block
    (35) if_stmt -> . IF expression block ELSE block
    (36) if_stmt -> . IF expression block
    (20) funcdecl -> . opt_import FUNC ID ( parameters_opt ) type_opt { statement_list }
    (19) assignment -> . location = expression ;
    (13) vardecl -> . CONST ID type opt_init ;
    (14) vardecl -> . VAR ID opt_type opt_init ;
    (21) opt_import -> .
    (22) opt_import -> . IMPORT
    (39) location -> . BACKTICK primary
    (40) location -> . ID
    }               shift and go to state 119
    RETURN          shift and go to state 5
    CONTINUE        shift and go to state 6
    BREAK           shift and go to state 7
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    FUNC            reduce using rule 21 (opt_import -> .)
    IMPORT          shift and go to state 21
    BACKTICK        shift and go to state 22
    ID              shift and go to state 17

    opt_import                     shift and go to state 16
    statement                      shift and go to state 23
    print_stmt                     shift and go to state 4
    while_stmt                     shift and go to state 8
    if_stmt                        shift and go to state 9
    funcdecl                       shift and go to state 10
    assignment                     shift and go to state 11
    vardecl                        shift and go to state 12
    location                       shift and go to state 18

state 119

    (20) funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .
    RETURN          reduce using rule 20 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    CONTINUE        reduce using rule 20 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    BREAK           reduce using rule 20 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    PRINT           reduce using rule 20 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    WHILE           reduce using rule 20 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    IF              reduce using rule 20 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    CONST           reduce using rule 20 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    VAR             reduce using rule 20 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    IMPORT          reduce using rule 20 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    BACKTICK        reduce using rule 20 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    ID              reduce using rule 20 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    FUNC            reduce using rule 20 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    $end            reduce using rule 20 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)
    }               reduce using rule 20 (funcdecl -> opt_import FUNC ID ( parameters_opt ) type_opt { statement_list } .)


Conflicts:

shift/reduce conflict for % in state 75 resolved as shift
shift/reduce conflict for / in state 75 resolved as shift
shift/reduce conflict for * in state 75 resolved as shift
shift/reduce conflict for - in state 75 resolved as shift
shift/reduce conflict for + in state 75 resolved as shift
shift/reduce conflict for GE in state 75 resolved as shift
shift/reduce conflict for LE in state 75 resolved as shift
shift/reduce conflict for GT in state 75 resolved as shift
shift/reduce conflict for LT in state 75 resolved as shift
shift/reduce conflict for NE in state 75 resolved as shift
shift/reduce conflict for EQ in state 75 resolved as shift
shift/reduce conflict for LAND in state 75 resolved as shift
shift/reduce conflict for LOR in state 75 resolved as shift